//Here my University online C programming contest (problem & solve).

//Contest No : 01

/*Name: Coordunates of a Point.
Problem: Given two numbers X, Y which donate coordinates of a point in 2D plan. Determine in 
which quarter does it belong.
Note:
1. Print Q1, Q2, Q3, Q4 according to the quarter in which the point belongs to.
2. Print "Origem" If the point is at the origin.
3. Print "Eixo X" If the point is over X axis.
4. Print "Eixo Y" if the point is over Y axis.
*/
#include<stdio.h>
int main(){
    double x,y;
    scanf("%lf %lf",&x,&y);
    if(x==0 && y ==0){
        printf("Origem\n");
    }
    else if(x>0 && y>0){
        printf("Q1\n");
    }
    else if(x<0 && y>0){
        printf("Q2\n");
    }
    else if(x<0 && y<0){
        printf("Q3\n");
    }
    else if(x>0 && y<0){
        printf("Q4\n");
    }
    else if(x==0){
        printf("Eixo Y\n");
    }
    else if(y==0){
        printf("Eixo X\n");
    }
return 0;
}

/*Name: Shopping
Problem: Tanvir and Kawser have gone out for shopping, and Tanvir wants to buy a new pair of 
shoes for Eid. He has enough money to buy anything. However, Tanvir will only buy shoes 
if kawser also buys a pair. And kawser will buy a pair of shoes if he can buy a panjabi. That 
means everything depends on the panjabi.

You have decided that kawser will buy a panjabi only if he has more than 1000 Taka. After 
purchasing the panjabi the amount of his money will be reduced by 1000. Suppose kawser 
has 1600 taka with him, after buying the panjabi he will have 600 taka left with him.
Then kawser will only buy shoes if he has 500 Taka or more left. That means, if kawser 
can't buy Punjabi he can't buy shoes.
Now if I inform you of the amount of N taka that Kawser's mother will give him. Can you 
tell me what will happen next?

*If Kawser buys a Panjabi print "KAWSER WILL BUY PANJABI".
*If Kawser buys a pair of Shoes print "KAWSER WILL BUY NEW SH0ES"
*If Tanvir buys a pair of Shoes print "TANVIR WILL BUY NEW SH0ES"
*If no one can buy anything print "BAD LUCK!"
Note: Don't forget to print a new line after every line you print.
*/
#include<stdio.h>
int main(){
    long long int Kawser_money;
    scanf("%lld",&Kawser_money);
    if(Kawser_money>=1500){
        printf("KAWSER WILL BUY PANJABI\nKAWSER WILL BUY NEW SH0ES\nTANVIR WILL BUY NEW SH0ES\n");
    }
    else if(Kawser_money>1000 && Kawser_money<1500){
        printf("KAWSER WILL BUY PANJABI\n");
    }
    else if(Kawser_money>=1 && Kawser_money<=1000){
        printf("BAD LUCK!\n");
    }
    else{
        printf("");
    }
return 0;
}

/*Problem Name: What's Your Level?
Problem:  These contests are designed to test your limits on the basic concepts of programming. 
There are a total of ten problems. One is at the beginner level if he can solve more 
than two problems. And he is at a good beginner level if he solves more than five problems. 
If someone solves all the problems, he is at an intermediate level. If he doesn't fit any 
of the levels, he should seek for help.
Solved number of problems p is given. Now your task is to display,
. Push Your Limits (if p>2)
. Keep Pace Up (if p>5)
. Way To Go (if p=10)
. Seek For Help (otherwise)
*/
#include<stdio.h>
int main(){
    int p;
    scanf("%d",&p);
    if(p>2 && p<=5){
        printf("Push Your Limits\n");
    }
    else if(p>5 && p<=9){
        printf("Keep Pace Up\n");
    }
    else if(p==10){
        printf("Way To Go\n");
    }
    else{
        printf("Seek For Help\n");
    }
return 0;
}

/*Problem Name: Rainbow color
Problem: Did you ever see any rainbows? Rainbows can be caused by many forms of airborne 
water. Rainbows can have many colors, but only seven of them can be seen through human 
eyes. Those are red, orange, yellow, green, blue, indigo and violet. This color sequence 
is called Newton's sevenfold.
Now if this sequence is numbered from 0 to 6. So, if 2 is the input, then the color will 
be "Yellow". You are given a color number, You have to determine the correct color for a 
chosen number.
*/
#include<stdio.h>
int main(){
    int n;
    scanf("%d",&n);
    if(n==0){
        printf("Red\n");
    }
    else if(n==1){
        printf("Orange\n");
    }
    else if(n==2){
        printf("Yellow\n");
    }
    else if(n==3){
        printf("Green\n");
    }
    else if(n==4){
        printf("Blue\n");
    }
    else if(n==5){
        printf("Indigo\n");
    }
    else if(n==6){
        printf("Violet\n");
    }
    else{
        printf("");
    }
return 0;
}

/*Problem Name: Burger buying dilemm
Problem: Eibrahim, Rifat, and Rikon, three friends with varying financial capacities, have decided to 
satisfy their cravings with burgers.
Eibrahim possesses x taka, Rifat holds y taka, and Rikon carries z taka. However, the price of each 
burger is m taka.
Determine the maximum number of burgers 3 friends can purchase with their combined budget and also 
calculate the exact fractional amount of burger that each one of them will get.
If they buy 4 burgers each person will get 1.33 burger
Input Format: Input contains two lines, first one determining the value of x, y, z and the second 
line contains how much the burger costs(m)
*/
#include<stdio.h>
#include<math.h>
int main(){
    double x,y,z,m;
    scanf("%lf %lf %lf %lf",&x,&y,&z,&m);
    double total_taka = (x+y+z);
    double total_burger = flor(total_taka/m);
    double ammount_burger = total_burger/3;
    printf("The total number of burgers : %.0lf\n",total_burger);
    printf("Each person will get : %.2lf Amount of Burger\n",ammount_burger);
return 0;
}

/*Problem Name: Discover new formula
Problem: In a distant village, there were two close friends, Alina and Ben. They stumbled upon a 
hidden cave containing a pair of enchanted amulets that promised extraordinary powers. The 
amulets, when worn together, had the ability to unveil hidden truths.
One day, as they discussed Albert Einstein and researched common formulas, they stumbled upon a 
new formula closely resembling (a-b)^2. However, they decided to experiment with a different 
approach. which is like-
There are three step to solve the problem:
a^2: This term represents the square of the variable a
-(a*b)^2: This term represents the square of the product of a and b..
+b^2: Finally,This term represents the square of the variable b.

In summary, the entire expression calculates a value by taking the square of 'a', subtracting 
the squared product of 'a' and 'b', and then adding square of 'b'. The specific values of 'a' 
and 'b' will determine the numerical outcome of this expression.
lets Combine the formulas and find the value with POSITIVE mind.
*/
/*
#include<stdio.h>
int main(){
    int a,b;
    scanf("%d %d",&a,&b);
    int x = a*a;
    int y = (a*b)*(a*b);
    int z = b*b;
    int ans = x-y+z;
    ans = abs(ans);
    printf("%d\n",ans);
return 0;
}

/*Problem Name: Biggest Name
Problem: Mr Abu Kop is confused about an calculation. He can't calculate with name is big. Is his 
firstname is big or lastname is big. can you help Mr Abu to find big name. You must calculate with 
ASCII value of character.
Input Format: There will be 6 character. First Three character represented Fistname and Last Three 
character name Lastname.
*/
#include<stdio.h>
int main(){
    char a,b,c,d,e,f;
    scanf("%c %c %c %c %c %c",&a,&b,&c,&d,&e,&f);
    int first = a+b+c;
    int sec = d+e+f;
    if(first>sec){
        printf("First Name Is Big\n");
    }
    else{
        printf("Last Name Is Big\n");
    }


return 0;
}

/*Problem Name: The Beginning
Problem: From now, you all start your Coding Journey. We all wish you good luck. Just remember one thing Never Give Up.
Just print a line saying "Never Give Up" (without the quotation marks).
*/
#include<stdio.h>
int main(){
    printf("Never Give Up\n");
return 0;
}

/*Problem Name: Battle of Armies
Problem: In ancient times, there were two great kings, Ibrahim Lodi and Babur, who ruled over their
kingdoms with wisdom and fairness. They were known for their knowledge of history and their ability
to accurately predict the outcomes of battles.
One day, Ibrahim Lodi and Babur decided to test their skills against each other in a friendly 
competition. They agreed to enter their armies into a simulated battle and see which king could 
accurately predict the outcome.
To prepare for the competition, they used their knowledge of history and analyzed the strengths and 
weaknesses of their armies. They determined that the difference in the size of their armies would be
a key factor in the outcome of the battle.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d %d",&x,&y);
    printf("%d\n",x>y);
    int d = x-y;
    d = abs(d);
    printf("%d\n",d);
return 0;
}

/*Problem Name: The Age of Love
Problem: John has finally found the love of his life and is ready to tie the knot. But as he prepares to 
propose, he realizes that his age may be a hurdle. He's not sure if he's legally allowed to get married 
in his country or not. Can you help him?
Given John's age, a, and the legal age to get married in his country, x, your task is to determine whether 
it's legal for him to get married or not. If it is legal, print "Y" (without quotes). Otherwise, print "N" 
(without quotes).
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d %d",&x,&y);
    if(x<y){
        printf("N\n");
    }
    else{
        printf("Y\n");
    }
return 0;
}

/*Problem Name: Watermelon Sharing
Problem: You are given the weight of a watermelon 'w'. Your task is to determine if it's possible to 
share the watermelon among two friends, with each friend receiving an even number of kilograms.
* Input Format: The input consists of a single integer 'w' representing the weight of the watermelon.
* Constraints: (1 ≤ w ≤ 100)
* Output Format: Print "YES" if it's possible to divide the watermelon into two even parts, each 
weighing an even number of kilograms. Otherwise, print "NO".
*/
#include<stdio.h>
int main(){
    int w;
    scanf("%d",&w);

    if(w%2==0 && w>2){
        printf("YES\n");
    }
    else{
        printf("NO\n");
    }
return 0;
}

/*Problem Name: Slash Game
Problem: All you know, Our Tanvir Vaiya is a good programmer. But sometime he played some 
weird games. Like- making symbols with Forwardslash(/), BackSlash() & Percentage(%) sign.
So he art a line with 3 three symbols.

                        /\/ /\ "%" \/
                        
Your task is print this line.
*/
#include<stdio.h>
int main(){
    printf("/\\/ /\\ \"%%\" \\/\n");
    return 0;
}

/*Problem Name: Sum Sign
Problem: You are given two integers 'a' and 'b'. Your task is to determine whether the sum of 'a' 
and 'b' is Positive, Negative, or Zero.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d %d",&x,&y);
    int ans = x+y;
    if(ans>0){
        printf("Positive\n");
    }
    else if(ans==0){
        printf("Zero\n");
    }
    else{
        printf("Negative\n");
    }
return 0;
}

/*Problem Name: Largest Integer
Problem: You are given three integers 'a', 'b', and 'c'. Your task is to determine the 
largest of the three integers.
*/
#include<stdio.h>
int main(){
    int a,b,c;
    scanf("%d %d %d",&a,&b,&c);
    if(a>=b && a>=c){
        printf("%d\n",a);
    }
    else if(b>=a && b>=c){
        printf("%d\n",b);
    }
    else{
        printf("%d\n",c);
    }
return 0;
}

/*Problem Name: symbol
Problem: You are given two integers 'a' and 'b'. Your task is to determine whether 'a' is greater than, 
less than, or equal to 'b'.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d %d",&x,&y);
    if(x>y){
        printf(">\n");
    }
    else if(x<y){
        printf("<\n");
    }
    else{
        printf("=\n");
    }
return 0;
}

/*Problem Name: Number Type
Problem: You are given an integer 'n'. Your task is to determine whether 'n' is a positive, 
negative, or zero, and whether it is odd or even.
*/
#include<stdio.h>
int main(){
    int x;
    scanf("%d",&x);
    if(x>0){
        if(x%2==0){
            printf("Positive Even\n");
        }
        else{
            printf("Positive Odd\n");
        }
    }
    else if(x<0){
        if(x%2==0){
            printf("Negative Even\n");
        }
        else{
            printf("Negative Odd\n");
        }
    }
    else{
        printf("Zero\n");
    }
return 0;
}

/*Problem Name: Sultan's Kingdom
Problem: Sultan Fahim has three 3 sons (Abul(A), Babul(B), Chabul(C)) and 3 wives (Rojina(R), 
Morjina(M), Torjina(T)). He is 73 now and unable to manage so many sons and wives. He wants 
to divide his kingdom among them. After the partition, he wants his kingdom to be looked like this.
 his kingdom shape is a hexagon. He wants to give the square shaped lands (A,B,C) to his sons 
(where B=C) and triangle shaped lands (R,M,T) to his wives. And he wants to live right in the 
center S of his kingdom.
You are one of the best mathematicians in the kingdom. Now he seeks your help to do the partition. 
You are given the area of A & B and you have to determine the area of S.
*/
#include<stdio.h>
#include<math.h>
int main(){
    double a,b,c;
    scanf("%lf %lf",&a,&b);
    c = b;
    a = sqrt(a);
    b = sqrt(b);
    c = sqrt(c);
   double s =(a+b+c)/2;
   double area = sqrt(s*(s-a)*(s-b)*(s-c));
   printf("%.4lf\n",area);
return 0;
}

/*Problem Name: Triangle Introduction
Problem: Khoka is a new student of class 5. He doesn't know the types of triangles. Help him 
knowing the types of triangle. If three of the lengths are equal then it is Equilateral 
Triangle. If two of the lengths are egual then it is Isosceles Triangle. If three lengths are 
different then it is Scalene Triangle.
*/
#include<stdio.h>
int main(){
    int a,b,c;
    scanf("%d %d %d",&a,&b,&c);
    if(a==b && b==c){
        printf("Equilateral Triangle\n");
    }
    else if(a==b || b==c || c==a){
        printf("Isosceles Triangle\n");
    }
    else{
        printf("Scalene Triangle\n");
    }
return 0;
}

/*Problem name: Banana buyer
Problem: Mr. Bitla has T Dollars. He wants to buy banana. If every banana costs B taka then how 
many banana he can buy and how much taka he will have extra. 1 Dollar = 109 taka.
*/
#include<stdio.h>
#include<math.h>
int main(){
    double a,b;
    scanf("%lf %lf",&a,&b);
    double total_dollar = a*109;
    int banana = total_dollar/b;
    double extra_money = fmod(total_dollar, b);
    printf("Number of Banana = %d\n",banana);
    printf("Extra Money = %.3lf Dollar\n",extra_money/109);

return 0;
}

/*Problem Name: Math Puzzle
Problem: "Do you know Kawser bhai? No problem; I will introduce him to you. He is a proud 
member of our programming club. Last Sunday, he went to the Bangabandhu Sheikh Mujibur 
Rahman Novo Theatre. There, he came across a math puzzle that piqued his curiosity. Despite 
many attempts, he couldn't solve the puzzle. Now, he seeks your help. Would you like to 
assist your Kawser bhai?
1) 5 3 2 = 35
2) 9 2 4 = 69
3) 8 6 3 = 89
*/
#include<stdio.h>
int main(){
    int a,b,c;
    scanf("%d %d %d",&a,&b,&c);
    int ans = (a+b+c)+(a*b)+(a*c);
    printf("%d\n",ans);
return 0;
}

/*Problem Name: The mystrical monarch (sung jin woo)
Problem: Ashik bhai stucked in the world of The Mystical Monarch. To defeat the Monarch, he needs 
the power of a combination of 3 elements. Luckily, he has somehow figured out the way to defeat 
the Monarch.
Basically, there are 3 mythical powers. Let’s name them X, Y, and Z.
Unfortunately, that's not enough. So, you have to cube each of them and then combine the final 
powers to defeat the Mystical Monarch.
Last but not least, big powers can be easily detected by the Smart Evil Monarch. So your task 
is to compress the final power with Sqrt() to outsmart him.
*/
#include<stdio.h>
int main(){
    long long int a,b,c;
    scanf("Hope: %lld : %lld : %lld",  &a,  &b,  &c);
    a = abs(a);
    b = abs(b);
    c = abs(c);
    double cubic = (a*a*a)+(b*b*b)+(c*c*c);
    int sq = sqrt(cubic)*10;
    printf("%d",sq%100);
return 0;
}

/*Problem Name: Mythical ascii -01
Problem: Book Name Mythical ASCII. It's has Only One question. There are Given 2 Input. Those can 
be Charater/Number/Symbol.
You Have to Find out What is there type(Char/Number/Symbol)
if First Input is Non - Number (A-Z,a-z, or Symbol). Just Print (Character/Symbol).
If First Input is Number ( 0-9 ). Just print the Total Value of (Ascii value) those Input.
N:B: Simple You will Print Character/Symbol/Number base on First Input Only. then Print the Total Value
*/
#include<stdio.h>
int main(){
    char x,y;
    scanf("%c %c",&x,&y);
    int a = x;
    int b = y;
    if(a>=48 && a<=57){
        printf("Number\n");
        printf("%d",a+b);
    }
    else if(a>=65 && a<=122){
        printf("Character\n");
        printf("%d",a+b);
    }
    else {
        printf("Symbol\n");
        printf("%d",a+b);
    }

return 0;
}

/*Problem Name: Even-odd-prime number-01
Problem: Do you know What is Even Number ? Odd Number Prime number ? Ashik Vhiya Can't 
remember! Can you help him to find the Number?
Constraints : 1 <= N <= 10
*/
#include<stdio.h>
int main(){
    int a;
    scanf("%d",&a);
    if(a==1){
        printf("0DD\n");
    }
    else if(a==2){
        printf("EVEN\nPRIME\n");
    }
    else if(a==3){
        printf("0DD\nPRIME\n");
    }
    else if(a==4){
        printf("EVEN\n");
    }
    else if(a==5){
        printf("0DD\nPRIME\n");
    }
    else if(a==6){
        printf("EVEN\n");
    }
    else if(a==7){
        printf("0DD\nPRIME\n");
    }
    else if(a==8){
        printf("EVEN\n");
    }
    else if(a==9){
        printf("0DD\n");
    }
    else{
        printf("EVEN\n");
    }
return 0;
}

/*Problem Name: I am phthagoras...!
Problem: Once upon a time, in a quaint little town nestled among rolling hills, there lived a young 
enthusiast of geometry named Alex. From an early age, Alex was fascinated by the elegant symmetries 
and mathematical precision found within the realm of shapes and angles. His passion for geometry was 
unrivaled, and he admired the ancient teachings of Pythagoras.Alex's father, Amir, had immigrated to 
their town from the United Arab Emirates.
One sunny afternoon, a package arrived at their doorstep from Amir's homeland. Excitedly, Alex open 
the box to reveal a seemingly ordinary-looking stick. But as Alex picked it up, he noticed something 
peculiar– the stick could change its shape at will! It could transform into a perfect circle, a 
symmetrical triangle, or even a complex polygon with a simple twist and turn.
Thrilled by this extraordinary gift, Alex immediately set to exploring the stick's capabilities. 
He experimented with various shapes, marveling at the endless possibilities it offered.

Input Format: The only line contains three integers X, Y, Z denoted the three sides of a triangle, 
which is maked by the magical stick. Your task is to find the value of the circle which can be made 
by the stick.
*/
#include<stdio.h>
int main(){
    double a,b,c;
    scanf("%lf %lf %lf",&a,&b,&c);
    double r = (a+b+c)/(2*3.1416);
    double area = 3.1416*r*r;
    printf("%.3lf\n",area);
return 0;
}

/*Problem Name: Electoria Voting eligibility
Problem: In a small town named Electoria, a new digital system is being tested to determine 
whether a person is eligible to vote. The mayor has decided to begin testing this system by 
checking the age of citizens.
Your task is to help Electoria by writing a simple program. The system will take a citizen’s 
age as input and display whether the person is eligible to vote, not eligible, or just a kid.
Electoria’s rules are:
1) If the age is 15 or less, the person is a kid and not eligible to vote.
2) If the age is greater than 15 but less than 18, the person is not eligible to vote.
3) If the age is 18 or more, the person can vote.
*/
#include<stdio.h>
int main(){
    int age;
    scanf("%d",&age);
    if(age>=0 && age<=15){
        printf("You are a kid. You are not eligible to vote.\n");
    }
    else if(age>15 && age<18){
        printf("You are not eligible to vote.\n");
    }
    else{
        printf("You can vote.\n");
    }
return 0;
}

/*Problem Name: Race To 100
Problem: In the digital city of Numerica, two robots named Alpha and Beta are competing in a math 
race. The rule is simple: get as close to 100 as possible.
Each robot submits a number. Your task is to write a program that decides:
Who is closer to the number 100
If both are equally close, it's a tie — return 0
This judgment system helps determine the winner with perfect fairness!
*/
#include<stdio.h>
int main(){
    int a,b;
    scanf("%d %d",&a,&b);
    int a1 = 100-a;
    int b1 = 100-b;
    a1 = abs(a1);
    b1 = abs(b1);
    //printf("%d\n%d\n",a1,b1);
    if(a1>b1){
        printf("%d\n",b);
    }
    else if(b1>a1){
        printf("%d\n",a);
    }
    else{
        printf("0\n");
    }
return 0;
}

/*Problem Name: Time Consume
Problem: Dekisugi does tuition for earning his money of semester fees. He manages 3 tuitions 
per day. So he needs to go from one house to another house by walking as he has not enough 
money to go by rickshaw. He takes T1 minutes for first tuition, T2 minutes for second tuition 
and T3 minutes for third tuition. So he has to waste many times. Help Dekisugi counting how 
many hours and minutes he takes to walk for tuitions.
*/
#include<stdio.h>
int main(){
    long long int t1,t2,t3;
    scanf("%lld %lld %lld",&t1,&t2,&t3);
    long long int total_min = t1+t2+t3;
    long long int total_hours = total_min/60;
    long long int min = total_min%60;
    printf("%lld Hour %lld Minute\n",total_hours,min);
return 0;
}

/*Problem Name: Magical Equation Solver
Problem: In the enchanted realm of Hyrule, a mystical quadratic equation has been discovered:
ax^2 + bx + c = 0

Where magical energies swirl within the coefficients a = 2, b = -5, and c = -3. Your task is 
to tap into the arcane forces and unveil the greatest integer solution for x.
Your program should harness the ethereal powers without seeking input from mere mortals. 
Participants are tasked with crafting code to decipher the equation's secrets and unveil the 
largest integer solution for x. Once found, print this majestic integer as the culmination of 
your mystical journey.
*/
#include<stdio.h>
int main(){
    printf("3\n");
return 0;
}

/*Problem Name: Dungeaon of Fear & Hunger: Enigmatic Puzzle
Problem: Within the labyrinthine depths of the dreaded Dungeon of Fear & Hunger, where 
shadows coil and whispers echo endlessly, you stand before an ancient triangle shaped 
tablet inscribed with cryptic symbols. In the flickering torchlight, you decipher a 
mystifying message that speaks of a triangle concealed in the shadows.
Of this triangle, two of the sides labeled as a = 7 and b = 24, and an angle of precisely
90 degrees between them, your task is to pierce the veil of uncertainty and unveil the 
length of the enigmatic side marked c.
Brace yourself, for the secrets you seek lie beyond the reach of mortal comprehension. 
Only the most intrepid and cunning adventurers dare to unravel the mysteries that dwell 
within these cursed halls.
Hint: You can use the Pythagorean theorem to find out the value of c.
*/
#include<stdio.h>
#include<math.h>
int main(){
    int a =7;
    int b = 24;
    int c = sqrt((b*b)+(a*a));
    printf("%d\n",c);
return 0;
}

/*Problem Name: Ranking Dilemma
Problem: Once upon a time in the sprawling lands of the Republic of Padokea, nestled amidst lush 
forests and towering mountains, there lived a young boy named Killua Zoldyck. Born into the 
infamous Zoldyck family, renowned for their mastery of assassination and feared by many, Killua's 
childhood was far from ordinary. But In a parallel universe, Killua wanted to be a programmer.
So, he started learning C programming and entered the world of problem solving. After some days, 
he gave his first contest. But he didn't understand the timing in which the ranking of his contest 
was based on. As he solved 5 problems respectively on M1, M2, M3, M4 & M5 minutes and submitted 
total T times in that contest. Kilua wanted to find out the process of the total solution time in 
the ranking. Help him to determine his total solution time in the contest. One wrong submission 
means 20 minutes penalty.

Input Format: The input contains six integers M1, M2, M3, M4 & M5 the submitted minutes of his
solved problems & T the total times he submitted
*/
#include<stdio.h>
int main(){
    long long int m1,m2,m3,m4,m5,t;
    scanf("%lld %lld %lld %lld %lld %lld",&m1,&m2,&m3,&m4,&m5,&t);
    long long int total_M = m1+m2+m3+m4+m5;
    long long int T = (t-5)*20;
    long long int total_time = T + total_M;
    printf("%lld\n",total_time);
return 0;
}

/*Problem Name: Edelgard's Army Arithmetic
Problem: In the impending battle between the Adrestian Empire and the Holy Kingdom of Faerghus,
the difference in the number of soldiers between the two opposing armies has become a point of 
concern for Edelgard, the commander of the Adrestian forces. As a participant in a C programming 
contest, your task is to develop a program that efficiently calculates and displays the disparit
in the number of soldiers between the two armies.
Given the number of soldiers in each army, your program should determine the absolute difference 
in troop counts. Additionally, it should provide insights into whether one army significantly 
outnumbers the other or if the forces are evenly matched.
Write a C program that takes as input the number of soldiers both armies. Your program should 
then calculate and output the absolute difference in the number of soldiers between the two armies.
*/
#include<stdio.h>
int main(){
    int a,b;
    scanf("%d %d",&a,&b);
    int d = a-b;
    d = abs(d);
    printf("%d\n",d);
return 0;
}

/*Problem Name: Shopping Spree: Rounded-up
Problem: Sabid loathes dealing with fractional numbers during his shopping endeavors. To simplify 
matters, he rounds up the total cost of his purchases to the next whole number, ensuring he only 
deals with integers.He gives out those extra cents as tips.
Moreover, Sabid is a generous tipper, always adding $5 to his rounded-up total cost as a gratuity.
Your task is to develop a program that helps Sabid calculate both the total cost of his shopping 
spree and the corresponding tip amount.
Write a C program that takes as input the price of 4 products Sabid wants to buy. The program 
should then calculate the total cost(Including the tip) of Sabid's shopping trip and the total 
amount of tip he intends to give out.
*/
#include<stdio.h>
#include<math.h>
int main(){
    double a,b,c,d;
    scanf("%lf %lf %lf %lf",&a,&b,&c,&d);
    double total_taka = a+b+c+d;
    double total_taka1 = ceil((total_taka)+5);
    double tip = total_taka1-total_taka;
    printf("Total = %.0lf\n",total_taka1);
    printf("Tip = %.2lf\n",tip);
return 0;
}

/*Problem Name: The Curse
Problem: In the sprawling depths of an ancient, ominous dungeon, four valiant adventurers - Link, 
Samus, Luigi, and Falcon - embark on a perilous quest. Little do they know, a malevolent curse 
lurks within, sapping their vitality with each passing moment.
The curse, born from centuries of darkness, manifests differently for each hero, testing their 
resilience in unique ways. Link, wielding the legendary Master Sword, finds himself grappling 
with a curse that gnaws at his vitality with an unrelenting, yet manageable intensity. Samus, 
encased in her high-tech Power Suit, faces a curse that, while less aggressive, still threatens 
to diminish her strength. Luigi, the ever-reluctant hero, feels the curse's icy grip tighten 
slightly more, his fear amplifying its effects. And then there's Falcon, the epitome of courage 
and strength, yet even he is not immune, his indomitable spirit tested by the curse's 
relentless onslaught.
As they traverse the dungeon's twisting passages, encountering cursed artifacts and malevolent 
energies, their health points diminish gradually, each step forward exacting a toll on their well-being.
You are tasked with writing a program to simulate the harrowing journey of these four adventurers,
calculating their remaining health points after enduring four rounds of the curse's relentless assault.
Each character starts with 100 health points.
*/
#include<stdio.h>
int main(){
    int L1,L2,L3,L4,S1,S2,S3,S4,l1,l2,l3,l4,F1,F2,F3,F4;
    scanf("%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d",&L1,&S1,&l1,&F1,&L2,&S2,&l2,&F2,&L3,&S3,&l3,&F3,&L4,&S4,&l4,&F4);
    int L = L1+L2+L3+L4;
    int S = S1+S2+S3+S4;
    int Lu = l1+l2+l3+l4;
    int F = F1+F2+F3+F4;
    L = 100-L;
    S = 100-S;
    Lu = 100-Lu;
    F = 100-F;
    if(L>=0){
        printf("Link   : %d\n",L);
    }
    if(S>=0){
        printf("Samus  : %d\n",S);
    }
    if(Lu>=0){
        printf("Luigi  : %d\n",Lu);
    }

    if(F>=0){
        printf("Falcon : %d\n",F);
    }
return 0;
}

/*Problem Name: Battle of Wits
Problem: Moumita and Sabid, renowned for their competitive spirits, engage in an electrifying 
round of rock-paper-scissors. Moumita boldly selects her weapon first, opting for rock, while 
Sabid shrewdly follows suit with paper. It's a clash of strategies as they adhere to the 
timeless rules: rock is overpowered by paper, paper reigns over rock, and scissors cut through 
paper. After their choices are revealed, determine the outcome of this thrilling encounter, 
whether it's a triumphant victory for Moumita, a cunning win for Sabid, or a rare draw where 
neither yields to the other.
Input Format: The input consists of two character separated by a space.Moumita goes 1st then Sabid.
Give their choices by inputting a single character ('R', 'P', or 'S').
'S' for Scissors 'R' for Rock 'P' for Paper
*/
#include<stdio.h>
int main(){
    char ch1,ch2;
    scanf("%c %c",&ch1,&ch2);
    int a = ch1;
    int b = ch2;
    if(a== 82 && b == 80){
        printf("Sabid Wins!\n");
    }
    else if(a==82 && b ==83){
        printf("Moumita Wins!\n");
    }
    else if(a==80 && b ==83){
        printf("Sabid Wins!\n");
    }
    else if(a==80 && b ==82){
        printf("Moumita Wins!\n");
    }
    else if(a==83 && b==82){
        printf("Sabid Wins!\n");
    }
    else if(a==83 && b ==80){
        printf("Moumita Wins!\n");
    }
    else if(a==b){
        printf("Draw!\n");
    }
return 0;
}

/*Problem Name: Handshake Hassle
Problem: At a gentlemen's party, only the gentlemen were invited. And as they are very polite 
and disciplined, every one of them handshaked each other. But they didn't handshake twice with 
anyone. Your task is to find out, how many handshakes were made there?
For example, There are 6 people (A, B, C, D, E, F) in the image below. And there were 15 
handshakes.
*/
#include <stdio.h>
int main(){
    int num;
    scanf("%d",&num);
    int sum = ((num-1)*num)/2;
    printf("%d\n",sum);

return 0;
}

//Marathon Mo-02

/*Problem Name: Series-1
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
Input: 6.
Output: 
        * * * * * *
*/
#include<stdio.h>
int main(){
    int i=1,n;
    scanf("%d",&n);
    while(i<=n){
        printf("* ");
        i++;
    }
return 0;
}


/*Problem Name: series-2
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
Input: 8
Output: 
    1 2 3 4 5 6 7 8
*/
#include<stdio.h>
int main(){
    int i=1,n;
    scanf("%d",&n);
    while(i<=n){
        printf("%d ",i);
        i++;
    }
return 0;
}


/*Probme Name: series-3;
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
Input: 5
Output: 
    a b c d e
*/
#include<stdio.h>
int main(){
    char a='a';
    int n;
    int i=1;
    scanf("%d",&n);
    while(i<=n){
        printf("%c ",a);
        i++;
        a++;
    }
return 0;
}


/*Problem Name: Series-4
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
    1 3 5 7 9 11 13
*/
#include<stdio.h>
int main(){
     int i=1,n,count=1;

     scanf("%d",&n);
     while(count<=n){
        printf("%d ",i);
        i+=2;
        count++;
     }

return 0;
}


/*Problem Name: Series-5
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
Input: 5
Output: 
    1 2 4 8 16
*/
#include<stdio.h>
#include<math.h>
int main(){
    int p,i=0;
    scanf("%d",&p);
    while(i<p){
        int pa = pow(2, i);
        printf("%d ",pa);
        i++;
    }

return 0;
}


/*Problem Name: Series-6
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
Input: 6
Output: 1 4 9 16 25 36
*/
#include<stdio.h>
#include<math.h>
int main(){
    int i=1,n;
    scanf("%d",&n);
    while(i<=n){
        int ans = pow(i, 2);
        printf("%d ",ans);
        i++;
    }
return 0;
}


/*Problem Name: Series-7
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
Input: 8
Output: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 +
*/
#include<stdio.h>
int main(){
    int i=1,n;
    scanf("%d",&n);
    while(i<=n){
        printf("%d + ",i);
        i++;
    }
return 0;
}


/*Problem Name: Series-8
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
Input: 8
Output: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8
*/
#include<stdio.h>
int main(){
    int i=1,n;
    scanf("%d",&n);
    while(i<n){
        printf("%d + ",i);
        i++;
    }
    printf("%d",i);
return 0;
}


/*Problem Name: Series-9
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
INPUT: 5
OUTPUT: 1/2 + 1/3 + 1/4 + 1/5 + 1/6
*/
#include<stdio.h>
int main(){
    int i=2,n;
    scanf("%d",&n);
    while(i<=n){
        printf("1/%d + ",i);
        i++;
    }
    printf("1/%d",i);

return 0;
}


/*Problem Name: Series-10
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
INPUT: 8
OUTPUT: A B C D E F G H
*/
#include<stdio.h>
int main(){
    char a='A';
    int n;
    int i=1;
    scanf("%d",&n);
    while(i<=n){
        printf("%c ",a);
        i++;
        a++;
    }
return 0;
}


/*Problem Name: Series-11
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
INPUT: 6
OUTPUT: A C E G I K
*/


#include<stdio.h>
int main(){
    char a='A';
    int n;
    int i=1;
    scanf("%d",&n);
    while(i<=n){
        printf("%c ",a);
        i++;
        a+=2;
    }
return 0;
}


/*Problem Name: Series-12
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
INPUT: 7
OUTPUT: 2 4 6 8 10 12 14
*/
#include<stdio.h>
int main(){
    int i=1,count=2,n;
    scanf("%d",&n);
    while(i<=n){
        printf("%d ",count);
        i++;
        count+=2;
    }

return 0;
}


/*Problem Name: Series-13
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 5 25 125 625 3125
Input: 5
Output: 1 5 25 125 625
*/
#include<stdio.h>
#include<math.h>
int main(){
    int i=0,n;
    scanf("%d",&n);
    while(i<n){
        int result=pow(5, i);
        printf("%d ",result);
        i++;
    }
return 0;
}


/*Problem Name: Series-14
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 8 27 64 125 216 343 512
Input: 7
Output: 1 8 27 64 125 216 343
*/
#include<math.h>
#include<stdio.h>
int main(){
    int i=1,n;
    scanf("%d",&n);
    while(i<=n){
        int result = pow(i, 3);
        printf("%d ",result);
        i++;
    }

return 0;
}


/*Problem Name: Series-15
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 4 27 256 3125 46656
Input: 5
Output: 1 4 27 256 3125 
*/
#include<stdio.h>
#include<math.h>
int main(){
    int num=1,pw=1,n;
    scanf("%d",&n);
    while(num<=n){
        int result = pow(num, pw);
        printf("%d ",result);
        num++;
        pw++;
    }

return 0;
}


/*Problem Name: Series-16
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 + 3 + 5 + 7 + 9 + 11 + 13
Input: 6
Output: 1 + 3 + 5 + 7 + 9 + 11
*/
#include<stdio.h>
int main(){
    int i=1,count=1,n;
    scanf("%d",&n);
    while(count<n){
        printf("%d + ",i);
        i+=2;
        count++;
    }
    printf("%d",i);
return 0;
}


/*Problem Name: Series-17
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
2 + 4 + 6 + 8 + 10 + 12 + 14
Input: 6
Output: 2 + 4 + 6 + 8 + 10 + 12
*/
#include<stdio.h>
int main(){
    int i=2,count=1,n;
    scanf("%d",&n);
    while(count<n){
        printf("%d + ",i);
        i+=2;
        count++;
    }
    printf("%d",i);
return 0;
}


/*Problem Name: Series-18
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 + 2 + 4 + 8 + 16 + 32 + 64
Input: 6
Output: 1 + 2 + 4 + 8 + 16 + 32
*/
#include<stdio.h>
int main(){
    int i=1,n,result=1;
    scanf("%d",&n);
    while(i<n){

        printf("%d + ",result);
        result =result*2;
        i++;
    }
    printf("%d",result);
return 0;
}



/*Problem Name: Series-19
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 + 5 + 25 + 125 + 625
Input: 5
Output: 1 + 5 + 25 + 125 + 625
*/
#include<stdio.h>
#include<math.h>
int main(){
    int i=1,pw=0,n,result=1;
    scanf("%d",&n);
    while(i<n){
        printf("%d + ",result);
        result = pow(5, i);
        i++;
        pw++;
    }
    printf("%d",result);
return 0;
}


/*Problem Name: Series-20
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is to 
extend this pattern to length N. No further description of the rule is provided—you must deduce it from 
the initial fragment shown below.
1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100
Input: 9
Output: 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81
*/
#include<stdio.h>
#include<math.h>
int main(){
    int i=1,n,result=1;
    scanf("%d",&n);
    while(i<n){
        result = i*i;
        printf("%d + ",result);
        i++;
    }
    printf("%d",i*i);
return 0;
}


/*Problem Name: Series-21
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 + 8 + 27 + 64 + 125 + 216 + 343 + 512
Input: 6
Output: 1 + 8 + 27 + 64 + 125 + 216
*/
#include<stdio.h>
#include<math.h>
int main(){
    int i=2,n,result=1;
    scanf("%d",&n);
    while(i<=n){
        printf("%d + ",result);
        result= pow(i, 3);
        i++;
    }

    printf("%d",result);

return 0;
}



/*Problem Name: Series-22
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
1 + 4 + 27 + 256 + 3125 + 46656
Input: 4
Output: 1 + 4 + 27 + 256
*/
#include<stdio.h>
#include<math.h>
int main(){
    int i=1,pw=1,result=1,n;
    scanf("%d",&n);
    while(i<n){
        printf("%d + ",result);
        pw++;
        i++;
        result= pow(i, pw);
    }
    printf("%d",result);
return 0;
}


/*Problem Name: Series-23
Problem: You have discovered a cryptic “pattern” defined only by its first few terms. Your task is 
to extend this pattern to length N. No further description of the rule is provided—you must deduce 
it from the initial fragment shown below.
    1/2 + 3/4 + 5/6 + 7/8 + 9/10
Input: 5
Output: 1/2 + 3/4 + 5/6 + 7/8 + 9/10
*/
#include<stdio.h>
int main(){
    int i=1,j=2,k=1,n;
    scanf("%d",&n);
    while(i<n){
        printf("%d/%d + ",k,j);
        k+=2;
        j+=2;
        i++;
    }
    printf("%d/%d",k,j);
return 0;
}



/*Problem Name: Welcome to Loop
Problem: Take an input N and print the word "TCPC" exactly N times on separate lines.
Just print "TCPC" N times.
Input: 3
Output: "TCPC"
        "TCPC"
        "TCPC"
*/
#include<stdio.h>
int main(){
    int i=1,n;
    scanf("%d",&n);
    while(i<=n){
        printf("\"TCPC\"\n");
        i++;
    }
return 0;
}


/*Problem Name: Even Odd Clash
Problem: Zihan is learning programming and just discovered something. He wants to solve a 
simple problem: identifying Even and Odd numbers.
Input Format: The first line contains an integer T — the number of test case.
The next T lines contain one integer N each.
*/
#include<stdio.h>
int main(){
    int i=1,n,num;
    scanf("%d",&n);
    while(i<=n){
        scanf("%d",&num);
        if(num%2==0) {
            printf("Even\n");
        }
        else{
            printf("Odd\n");
        }
        i++;
    }
return 0;
}


/*Problem Name: Print in Groups-1
Problem: In the Kingdom of Letters, messengers carry important messages made of capital letters.
But the rule of the kingdom is simple: a messenger may only carry 5 letters per line on a scroll. 
If there are fewer than 5 letters left, the last line carries just those.
You are the Royal Scribe. Your job is to take a list of N letters and write them out, exactly as 
received, 5 letters per line — no more, no less. The letters must appear in the original order, 
neatly spaced.
*/
#include<stdio.h>
int main(){
    int n,i=1;
    char a='A';
    scanf("%d",&n);
    while(i<=n){
        printf("%c ",a);
        if(i%5==0){
            printf("\n");
        }
        a++;
        i++;
    }
return 0;
}



/*Problem Name: Print in Groups-2
Problem: In the Kingdom of Letters, messengers carry important messages made of capital letters.
But the rule of the kingdom is simple: a messenger may only carry 5 letters per line on a scroll. 
If there are fewer than 5 letters left, the last line carries just those.
You are the Royal Scribe. Your job is to take a list of N letters and write them out, exactly as 
received, 5 letters per line — no more, no less. The letters must appear in the original order, 
neatly spaced.
Input: 8
Output: Case - 1 : A B C D E
        Case - 2 : F G H
*/
#include<stdio.h>
int main(){
    int n,i=0,c=1;
    char a='A';
    scanf("%d",&n);
    while(i<n){
            if(i%5==0){
            printf("Case - %d : ",c);
            c++;
        }
        printf("%c ",a);

        a++;
        i++;
         if(i%5==0){
        printf("\n");
    }
    }
return 0;
}



/*Problem Name: Sum of Numbers-1
Problem: Ram is fascinated by numbers and enjoys solving simple mathematical problems. 
One day, he challenged himself to find the sum of all natural numbers starting from 1 
up to a given number N. Since Ram is learning programming, he wants to write a program 
that calculates this sum efficiently.
Your task is to help Ram by writing a program that reads an integer N and computes the 
sum of all integers from 1 to N inclusive. The program should output the final sum. 
*/
#include<stdio.h>
int main(){
    int i=1,j=1,sum=0,n,b;
    scanf("%d",&n);
    while(i<=n){
        scanf("%d",&b);
        sum=0;
        j=1;

        while(j<=b){
            sum=sum+j;
            j++;
        }
        i++;
        printf("%d\n",sum);
    }

return 0;
}


/*Problem Name: Sum of Numbers-2
Problem: In a small village, there lives a curious kid named Rafi. One day, Rafi found a magical 
notebook. Whatever numbers he writes in the notebook get added automatically!
Help Rafi by writing a program that reads N numbers and calculates their total sum, just like his 
magical notebook does!
*/
#include<stdio.h>
int main(){
    int i=1,j=1,sum=0,n,num;
    scanf("%d",&n);
    while(i<=n){
        scanf("%d",&num);
        sum=sum+num;
        i++;
    }
    printf("%d\n",sum);

return 0;
}


/*Problem Name: Sum of Numbers-3
Problem: In a distant land, there lies a guarded treasure chest locked behind an ancient number 
gate. The gatekeeper hands you two magical numbers, start and end. To unlock the chest, you must 
prove your skill by discovering the secret hidden between these numbers.
But beware! The magic only works if you exclude the start and end numbers themselves. Your task 
is to carefully examine all the numbers in between and uncover the sum of all these digits combined.
Only when you reveal this hidden treasure, will the gate open and the chest be yours.
*/
#include<stdio.h>
int main(){
    int i=1,a,b;
    long long int sum=0;
        scanf("%d %d",&a,&b);
        if(a>b){
        b=b+1;
        while(a>b){
            sum=sum+b;
            b++;
        }
        }
        else{
        a=a+1;
        while(a<b){
            sum=sum+a;
            a++;
        }
        }
        printf("%lld\n",sum);

return 0;
}


/*Problem Name: Sum of Odd
Problem: Read two integer values X and Y. Print the sum of all odd values between them.
*/
#include<stdio.h>
int main(){
   int a,b;
   long long int sum=0,i;
   scanf("%d %d",&a,&b);
   if(a>b){
        i=b+1;
    while(i<a){
        if(i%2!=0){
            sum+=i;
        }
        i++;
    }
   }
   if(a<b){
    i=a+1;
    while(i<b){
        if(i%2!=0){
            sum+=i;
        }
        i++;
    }
   }
   printf("%lld\n",sum);
}



/*Problem Name: Animal Testing
Problm: Maria has just started as graduate student in a medical school and she's needing your 
help to organize a laboratory experiment which she is responsible about. She wants to know, 
at the end of the year, how many animals were used in this laboratory and the percentage of 
each type of animal is used at all.
This laboratory uses in particular three types of animals: frogs, rats and rabbits. To obtain 
this information, it knows exactly the number of experiments that were performed, the type and 
quantity of each animal is used in each experiment.
Input Format: The first line of input contains an integer N indicating the number of test 
cases that follows. Each test case contains an integer Amount (1 ≤ Amount ≤ 15) which represents 
the amount of animal used and a character Type ('C', 'R' or 'S'), indicating the type of 
animal: - C: Coelho (rabbit in portuguese) - R: Rato (rat in portuguese) - S: Sapo (frog in portuguese)
Sample Input: 8
    12 C
    18 R
    25 S
    10 C
    20 R
    15 S
    5 C
    10 S
Sample Output: 
    Total: 115 cobaias
    Total de coelhos: 27
    Total de ratos: 38
    Total de sapos: 50
    Percentual de coelhos: 23.48 %
    Percentual de ratos: 33.04 %
    Percentual de sapos: 43.48 %
*/
#include<stdio.h>
int main()
{
    int N,i=1,animal,total=0,C=0,R=0,S=0;
    char x;
    scanf("%d",&N);
    while(i<=N)
    {
        scanf("%d %c",&animal,&x);
        if(x=='C'){
            C=C+animal;
            total=total+animal;
        }
        else if(x=='R'){
            R=R+animal;
            total=total+animal;
        }
        else if(x=='S'){
            S=S+animal;
            total=total+animal;
        }

        i++;

    }
    double cp = (C*(1.0)/total)*100;
    double rp = (R*(1.0)/total)*100;
    double sp = (S*(1.0)/total)*100;

    printf("Total: %d cobaias\n",total);
    printf("Total de coelhos: %d\n",C);
    printf("Total de ratos: %d\n",R);
    printf("Total de sapos: %d\n",S);
    printf("Percentual de coelhos: %.2lf %%\n",cp);
    printf("Percentual de ratos: %.2lf %%\n",rp);
    printf("Percentual de sapos: %.2lf %%\n",sp);

    return 0;
}



/*Problem Name: Find all Divisors.
Problem: Given a number N. Print all the divisors of N in ascending order.
Note: Divisor of Number is A number that divides the integer exactly (no remainder).
In other words the division works perfectly with no fractions or remainders involved.
Examples:
3 is a divisor of 12, because 12 ÷ 3 = 4 exactly
4 is a divisor of 12, because 12 ÷ 4 = 3 exactly.
5 is not a divisor of 12, because 12 ÷ 5 = 2 with a remainder of 2.
a divisor is also a factor of the original integer.
*/
#include<stdio.h>
int main(){
    int n,i=1;
    scanf("%d",&n);
    while(i<=n){
        if(n%i==0){
            printf("%d\n",i);
        }
        i++;
    }
return 0;
}



/*Problem Name: Sequence of Numbers and Sum
Problem: Take 2 inputs X and Y.
Print all the numbers in Y to X and find their sum.
*/
#include<stdio.h>
int main(){
    int a,b;
    long long int sum=0;
    scanf("%d %d",&a,&b);
    if(a>b){
        while(b<=a){
            printf("%d ",b);
            sum=sum+b;
            b++;
        }
    }
    else{
        while(a<=b){
            printf("%d ",b);
            sum=sum+b;
            b--;
        }
    }
    printf("SuM=%lld\n",sum);
return 0;
}


/*Problem name: One Prime
Problem: Given a number X. Determine if the number is prime or not.
Note: A prime number is a number that is greater than 1 and has only two factors 
which are 1 and itself.
In other words : prime number divisible only by 1 and itself.
Be careful that 1 is not prime.
*/
#include<stdio.h>
int main(){

    int x,i=2,count=0;
    scanf("%d",&x);

    while(i<x){
        if(x%i==0){
            count++;
        }
        i++;
    }
    if(x==1){
        printf("NO\n");}
    else if(count>0){
        printf("NO\n");
    }
    else{
        printf("YES\n");
    }
    return 0;
}


/*Problem Name: Who is The First
Problem: You are given a positive integer N. Write a program to find and output the first digit of N.
*/
#include<stdio.h>
int main(){
    int num,last;
    scanf("%d",&num);
    while(num>0){
        last=num%10;
        num=num/10;
    }
    printf("%d\n",last);
return 0;
}



/*Problem Name: Negative + Positive
Problem: Zihan is learning programming and just discovered something. He wants to solve 
a simple problem: identifying Positive and Negative numbers.
Input Format: The first line contains an integer T — the number of test case.
The next T lines contain one integer N each.
*/
#include<stdio.h>
int main(){
    int n,num,i=1;
    scanf("%d",&n);
    while(i<=n){
        scanf("%d",&num);
        if(num>0){
            printf("Positive\n");
        }
        else{
            printf("Negative\n");
        }
        i++;
    }
return 0;
}


/*Problem Name ASCII Identification
problem: ASCII  abbreviated from American Standard Code for Information Interchange, 
is a character encoding standard for electronic communication. ASCII codes represent 
text in computers, telecommunications equipment, and other devices. Most modern 
character-encoding schemes are based on ASCII, although they support many additional 
characters. ASCII table can be categorized as,

A Digit(0 to 9) can have decimal values from 48 to 57.
An Alphabet(a to z and A to Z) can have decimal values from 65 to 90 or 97 to 122.
And the others areSpecial Character.
*/
#include<stdio.h>
int main(){
    int n,i=1;
    char ascii;
    scanf("%d",&n);
    while(i<=n){
    scanf(" %c",&ascii);
    int a = ascii;

    if(a>=48 && a<=57){
        printf("Digit\n");
    }
    else if(a>=65 && a<=90){
            printf("Alphabet\n");}

    else if(a>=97 && a<=122){
        printf("Alphabet\n");
    }
    else{
        printf("Special Character\n");
    }
    i++;
    }
return 0;
}



/*Problem Name: Relationship Verdit
Problem: A relational operator checks the relationship between two operands. In 
C programming, there are six relational operators. they are, ==, !=, <, >, <=, and >=.

Mr. KnowItAll is learning C programming in recent days. Currently, he is learning about 
relational operands. But he is confused about determining the relation between operators. 
As a fellow learner, your task is to help him determine the relationship between two 
operands. In this task, you are given two integer values a,b and you have to guess the 
relation between them.
*/
#include<stdio.h>
int main(){
    int a,b,n,i=1;
    scanf("%d",&n);
    while(i<=n){
            scanf("%d %d",&a,&b);
        if(a<b){
            printf("%d < %d\n",a,b);
        }
        else if(a>b){
            printf("%d > %d\n",a,b);
        }
        else if(a==b){
            printf("%d = %d\n",a,b);
        }
        i++;
    }
return 0;
}



/*Problem name: The Multiplication Table
Problem: Shuvro, an avid learner, loves exploring the magical world of numbers. One day, 
he discovered a mystical artifact that granted him the ability to summon the Multiplication 
Tale for any chosen number.
Write a C program to help Shuvro unlock the secrets of this artifact. The program should 
take an integer N as input and generate the Multiplication Tale for N from 1 to 10.
*/
#include<stdio.h>
int main(){
    int num,i=1;
    scanf("%d",&num);
    while(i<=10){
            long long int result = i*num;
        printf("%d * %d = %d\n",num,i,result);
    i++;
    }
return 0;
}


/*Problem Name: The Mirror Maze
Problem: You are given two integers, start and end. Your task is to write a program that prints 
all the integers from start to end in increasing order, followed by all the integers from last 
digit to start in decreasing order.
*/
#include<stdio.h>
int main(){
    int a,b,i=0;
    scanf("%d %d",&a,&b);
    if(a>b){
        i=b;
        while(a>=i){
            printf("%d\n",i);
            i++;
        }

        a--;
        while(a>=b){
            printf("%d\n",a);
        a--;

        }
    }
    if(a<b){
        i=a;
        while(b>=i){
            printf("%d\n",i);
            i++;
        }
        b--;
        while(b>=a){
            printf("%d\n",b);
            b--;
        }

    }
return 0;
}



/*Problem name: The magic Factorial Machine
Problem: Once upon a time in the small village of Dhaka, there lived a curious young boy named 
Srabon. Srabon was fascinated by numbers. One day, he learned about factorial while reading a 
math book out of curiosity.
Factorial, in mathematics, is the product of all positive integers less than or equal to a given 
positive integer and denoted by that integer and an exclamation point. For Example, the factorial 
of 6 is 6 * 5 * 4 * 3 * 2 * 1 which is 720.
*/
#include<stdio.h>
int main(){
    int x;
    long long int fact=1;
    scanf("%d",&x);
     int i=1;
    if(x==0){
        printf("The Factorial of 0 is : 0 = 1");
    }


   if(x>0){
            printf("The Factorial of %d is : ",x);

    while(i<x){
        fact = fact*i;
        printf("%d*",i);
        i++;
    }
    printf("%d",i);
    fact=fact*i;
    printf(" = %lld\n",fact);}
return 0;
}



/*Problem name: Separate the Sums
Problem: In this problem, you are typically given a sequence of numbers and the task is to find the 
sum of even numbers and the sum of odd numbers separately within that sequence. The goal is to 
compute and return both sums as the output.
*/
#include<stdio.h>
int main(){
    int num,digit,odd=0,even=0;
    scanf("%d",&num);
    while(num>0){
        digit= num%10;
        if(digit%2!=0){
            odd=odd+digit;
        }
        else{
            even=even+digit;
        }
        num=num/10;
    }
    printf("SUM OF ODD NUMBERS : %d\n",odd);
    printf("SUM OF EVEN NUMBERS : %d",even);
return 0;
}


/*Problem name: Bad Number
Problem: In the mystical land of numbers, where digits dance and numbers roam, there existed a 
curious town named Numeria. In Numeria, numbers were not just symbols but held magical properties 
and unique qualities.
One day, the town was shrouded in a mysterious aura as rumors spread of the arrival of the Bad 
Numbers – they were divisible by both 2 and 4. The wise old sage of Numeria, known for his 
profound knowledge of arithmetic, sensed the town's unease and called upon a brave adventurer to 
embark on a quest. The task was simple yet crucial – to find the number of Bad Numbers within a 
given range [l, r].
*/
#include<stdio.h>
int main(){
    int a,b,total=0,i=1;
    scanf("%d %d",&a,&b);
    if(a>b){
            i=b;
        while(i<=a){
            if(i%2==0 && i%4==0){
                total++;

            }
            i++;
        }
    }
    else{
        i=a;
        while(i<=b){
            if(i%2==0 && i%4==0){
                total++;

            }
            i++;
        }
    }
    printf("%d",total);
return 0;
}


/*Problem Name: Primes from 1 to n
Problem: Given a number N . Print all prime numbers between 1 and N inclusive.
A prime number is a number that is greater than 1 and has only two factors which are 1 and itself.
In other words : prime number divisible only by 1 and itself.
Be careful that 1 is not prime .
If the input is 1 then the output will be "Not Prime"
*/
#include<stdio.h>
int main(){
   int i=2,prime_num=2,num,count=0;
   scanf("%d",&num);
   if(num==1){
    printf("Not Prime\n");
   }
   while(prime_num<=num){
        i=2;
         count=0;
         while(i<prime_num){
        if(prime_num%i==0){
            count++;
        }
        i++;
    }
    if(count==0){
        printf("%d ",prime_num);}
    prime_num++;
   }
return 0;
}


/*Problem Name: First and Last
Problem: Alex loves playing with numbers. Today, he found a large number written on a board 
and became curious: what are the first and last digits of that number? Can you help Alex 
write a program to find the first and last digits of a given number?
*/
#include<stdio.h>
int main(){
    int num,first,last;
    scanf("%d",&num);
    last=num%10;
    while(num>0){
        first=num%10;
        num=num/10;
    }
    printf("first = %d \n",first);
    printf("last = %d\n",last);

}



/*Problem Name: Defective Number
Problem: Your friend Arif works at a factory that manufactures electronic components.
Each component produced in the factory has a unique serial number printed on it. Now, 
to ensure product quality, the factory follows a peculiar rule:
If a component's serial number contains the digit 6 or 9, it is considered defective.
Otherwise, the component is labeled as a good product.
Arif has been tasked with checking each component by examining its serial number and 
determining whether it's defective or not. However, checking hundreds of serial numbers 
manually every day is exhausting, and Arif could really use your help.
He asks you to write a simple program that takes a serial number as input and tells 
whether it is a Defective Number or a Good Number.
*/
#include<stdio.h>
int main(){
    int num,digit,count=0;
    scanf("%d",&num);
    while(num>0){
        digit=num%10;
        num=num/10;
        if(digit==6 || digit==9){
            count++;
        }

    }
    if(count>0){
        printf("Defective Number\n");
    }
    else{
        printf("Good Number\n");
    }
return 0;
}


/*Problem Name: Long Loong
Problem: For a positive integer X, the Dragon String of level X is a string of length (X+3) formed by
one L, X occurrences of o, one n, and one g arranged in this order.
You are given a positive integer N. Print the Dragon String of level N. Note that uppercase and 
lowercase letters are distinguished.
*/
#include<stdio.h>
int main(){
    int x,i=1;
    scanf("%d",&x);
    printf("L");
    while(i<=x){
        printf("o");
        i++;
    }
    printf("ng");
return 0;
}



/*Problem Name: Fibonacci Generation
Problem: Make a Fibonacci series.
*/
#include<stdio.h>
int main(){
    int i=0,first=0,sec=1,fib=0,n;
    scanf("%d",&n);
    while(i<n){
       if(i<=1){
            fib=i;
        printf("%d ",fib);
       }
       else{
            fib=first+sec;
        printf("%d ",fib);
       first=sec;
       sec=fib;
       }
        i++;
    }
return 0;
}



/*Problem Name: Glass and Mug
Problem: Takahashi has a glass with a capacity of G milliliters and a mug with a capacity of M 
milliliters. Here, G < M. Initially, both the glass and the mug are empty. After performing the 
following operation K times, determine how many milliliters of water are in the glass and the mug, 
respectively.
When the glass is filled with water, that is, the glass contains exactly G milliliters of water, 
discard all the water from the glass.
Otherwise, if the mug is empty, fill the mug with water.
Otherwise, transfer water from the mug to the glass until the mug is empty or the glass is filled 
with water.
*/
#include<stdio.h>
int main(){
    int n,G,M,i=1,g=0,m=0;
    scanf("%d %d %d",&n,&G,&M);
    while(i<=n){
            if(g==0 && m==0){
                m=M;
            }
            else if(g==0 && m==M){
                g=G;
                m=M-G;

            }

            else if(g==0 && m<=G && m!=0){
                g=m;
                m=0;
            }
            else if(g==0 && m>G && m<M ){
                g=G;
                m=m-G;

            }
            else if(g!=0 && m==0 && g<G){
                m=M;
            }
            else if(g<G && g!=0 && m==M){
                m=M-(G-g);
                g=G;
            }
            else if(g==G ){
                g=0;

            }

            i++;
    }
    printf("%d ",g);
    printf("%d",m);
return 0;
}


//Marathon 2-1.

/*Problem Name: Find Multiple
Problem: In the cyberpunk city of Neon Hollow, a young hacker named Eron spends his nights 
cracking corporate firewalls. One night, while probing into the dark depths of a 
mega-corp’s database, he stumbles upon a strange encryption pattern embedded deep within 
the system logs.
Each pattern is a sequence of numbers between two bounds — A and B, inclusive. Eron learns 
that a specific encryption key, C, is used to validate entries. His mission? For each 
encrypted log, determine any number within the range [A, B] that is a multiple of C.
If such a number exists, it means the log is accessible. If not, the data is 
unreachable and must be skipped.
Can you help Eron decrypt these logs and pull out the right numbers?
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);
    while(t--){
        int a,b,c;
        scanf("%d %d %d",&a,&b,&c);


        int ans=0;
        for(int i=a; i<=b; i++){
            int temp= i%c;
            if(temp==0){
                 ans=i;
                break;
            }
        }


    if(ans>0){
        printf("%d\n",ans);
    }
    else{
        printf("-1\n");
    }
    }
return 0;
}



/*Problem Name: Sum of Multiples in a Range.
Problem: Given two integers a and b (where 1 ≤ a ≤ b ≤ 1000), and another integer k (where 1 ≤ k ≤ 10),
find the sum of all numbers between a and b (inclusive) that are multiples of k.
*/
#include<stdio.h>
int main(){

    int a,b,c;
    scanf("%d %d %d",&a,&b,&c);
    int sum=0;

        if(a<b){
            for(int i=a; i<=b; i++){
               a = i%c;
               if(a==0){
                sum=sum+i;
               }
            }
        }
        else{
            for(int i=b; i<=a; i++){
                b=i%c;
                if(b==0){
                sum=sum+i;
                }
            }
        }
    printf("%d\n",sum);
return 0;
}



/*Problem Name: Count Even Digits
Problem: You are given T test cases. For each test case, you are given a single integer N. 
Your task is to count how many digits in N are even (i.e., divisible by 2).
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int num,count=0;
        scanf("%d",&num);
        if(num==0){
            count++;
        }

        while(num){
            int temp = num%10;
            num=num/10;
            if(temp%2 == 0){
                count++;
            }
        }
        printf("%d\n",count);
    }

return 0;
}



/*Problem Name: The Magical Potion Shop
Problem: You are an apprentice in a Magical Potion Shop, where the shopkeeper gives you a 
series of tasks to prove your worth. Each task involves counting how many times a magic 
number K appears in a given number N.
The shopkeeper will give you T test cases.
For each test case, you’ll get two numbers: N (the number to check) and K (the magic digit to count).
Your task is to find how many times K appears in N.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
            int num,div,count=0;
        scanf("%d %d",&num,&div);

        while(num){
            int temp=num%10;
            if(temp==div){
                count++;
            }
            num=num/10;
        }
        printf("%d\n",count);
    }
return 0;
}



/*Problem name: Sum of Odd and Even Digits 3
Problem: You are given T test cases. For each test case, you are given a single positive integer N.
Your task is to separately compute the sum of its odd digits and the sum of its even digits.
A digit is considered:
Even if it is divisible by 2 (i.e., 0, 2, 4, 6, 8)
Odd otherwise (i.e., 1, 3, 5, 7, 9)
You must process each number digit by digit, and calculate the sum of all odd digits and sum of 
all even digits.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        long long int num,odd=0,even=0;
        scanf("%lld",&num);

        while(num){
            int temp = num%10;
            if(temp%2!=0){
                odd = odd+temp;
            }
            else{
                even = even+temp;
            }
            num=num/10;
        }
        printf("Odd=%lld ",odd);
        printf("Even=%lld\n",even);

    }
return 0;
}



/*Problem Name: Count Digits Greater Than or Equal to X
Problem: You are given T test cases. For each test case, you are given two integers: 
a positive number N and a digit threshold X (0 ≤ X ≤ 9). Your task is to count how 
many digits in N are greater than or equal to X.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        long long int num,count=0,x;
        scanf("%lld %lld",&num,&x);

        while(num){
            int temp=num%10;
            if(temp==x || temp>x){
                count++;
            }
            num=num/10;
        }
        printf("%lld\n",count);
    }
return 0;
}



/*Problem Name: Palinfrome Temple
Problem: Deep in the heart of the Amazon rainforest lies the legendary Temple of the Palindromes, 
built by an ancient civilization obsessed with symmetrical numbers. As an intrepid archaeologist, 
you've discovered the temple's entrance, but a massive stone door blocks your path.
The door is inscribed with a mysterious riddle: "Only those who understand the language of 
palindromes may enter. Prove your wisdom by solving our challenge."
The Challenge: The temple priests will give you multiple test cases. For each case, you must:
Take two numbers representing a range (L to R)
Count how many numbers in this range are palindromes
Speak your answer to open the door
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int L,R;
        scanf("%d %d",&L,&R);
        int count=0;
        for(int i=L; i<=R; i++){
                int rev=0;
                int k=i;
                L=i;
            while(L){
                int temp=L%10;
                L=L/10;
                rev=(rev*10)+temp;//0+11=110
            }
            if(rev==k){
                count++;
            }
        }
        printf("%d\n",count);

    }
return 0;
}



/*Problem name: Frequency Table 1
Problem: You are given t numbers. Count how many times each digit 0–9 appears in total.
Input Format:
First line: integer t
Next t lines: each contains a number
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);
    int one=0,two=0,three=0,four=0,five=0,six=0,seven=0,eight=0,nine=0,zero=0;

    while(t--){
        int num;
        scanf("%d",&num);
        while(num){
            int temp = num%10;
            num= num/10;
            if(temp==0){
                zero++;
            }
            else if(temp==1){
                one++;
            }
            else if(temp==2){
                two++;
            }
            else if(temp==3){
                three++;
            }
            else if(temp==4){
                four++;
            }
            else if(temp==5){
                five++;
            }
            else if(temp==6){
                six++;
            }
            else if(temp==7){
                seven++;
            }
            else if(temp==8){
                eight++;
            }
            else if(temp==9){
                nine++;
            }
        }
    }
    printf("0: %d\n",zero);
    printf("1: %d\n",one);
    printf("2: %d\n",two);
    printf("3: %d\n",three);
    printf("4: %d\n",four);
    printf("5: %d\n",five);
    printf("6: %d\n",six);
    printf("7: %d\n",seven);
    printf("8: %d\n",eight);
    printf("9: %d\n",nine);
return 0;
}



/*Problem Name: Robot Battery Checker.
Problem: You are the chief engineer at RoboCorp, and you've just received a shipment of T robot 
units for testing. Each robot has a unique Battery ID Number (N) — a positive integer.
Your job is to find out how many digits in the Battery ID are power-efficient. A digit is 
considered power-efficient if it is even and non-zero (i.e., 2, 4, 6, 8 — but not 0).
You must test T robots, one after another. For each robot's Battery ID, calculate how many digits 
are power-efficient.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);
    int i=1;

    while(t--){
        int num;
        scanf("%d",&num);
        int count=0;

        while(num){
            int temp = num%10;
            num = num/10;

            if(temp==0){

            }
            else if(temp%2==0){
                count++;
            }
        }

        printf("Robot #%d: %d power-efficient digits\n",i,count);
        i++;
    }
return 0;
}



/*Problem Name: Count Common Multiples
Problem: You are given two positive integers n and m (where 1 ≤ n, m ≤ 10). Write a C program 
using nested loops to count how many numbers from 1 to 100 are divisible by both n and m.
*/
#include<stdio.h>
int main(){
    int a,b;
    scanf("%d %d",&a,&b);
    int count=0;
    for(int i=1; i<=100; i++){
        if(i%a==0 && i%b==0){
            count++;
        }
    }
    printf("%d\n",count);
return 0;
}



/*Problem Name: Total Sum of Multiples
Problem: You are given multiple test cases. For each test case, you are given two integers n and k. 
Your task is to calculate the sum of all numbers between 1 and n (inclusive) that are divisible by 
k for each test case, and finally print the total sum of all these individual results.
You only need to print the total sum at the end in the following format:
**result = **TOTAL;
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);
    int sum=0;

    while(t--){
        int a,b;
        scanf("%d %d",&a,&b);

       for(int i=b; i<=a; i++){
            if(i%b==0){
                sum = sum+i;
            }
        }
    }
    printf("result = %d\n",sum);
return 0;
}



/*Problem Name: Dragon string;
Problem: For a positive integer N, the Dragon String of level N — a mighty roar forged as follows:
Begins with an 'L' (uppercase, as dragons don’t whisper)
Roars with N lowercase 'o's
Ends with the fierce 'n' and 'g'
You are given a positive integer N N. Print the Dragon String of level N N. Note that uppercase and 
lowercase letters are distinguished.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int x;
        scanf("%d",&x);
        printf("L");
        for(int i=1; i<=x; i++){
            printf("o");
        }
        printf("ng\n");
    }
return 0;
}



/*Problem Name: Digit Island
Problem: You are given T test cases. Each test case contains three integers: start, end, and divisor.
For each number from end down to start (inclusive), check whether all digits of the number are 
individually divisible by divisor.
Print the valid numbers in descending order for each test case. If no valid number exists, print -1.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);
    int i=1;

    while(t--){
        int a,b,div;
        scanf("%d %d %d",&a,&b,&div);

        printf("Case %d:\n",i);
        i++;
        int j=0;

        for(int i=b; i>=a; i--){
                b=i;
               int count=0;
               int count2=0;
            while(b){
                int temp = b%10;
                b = b/10;
                count++;
                if(temp%div ==0){
                    count2++;
                }
            }
            if(count==count2){
                    printf("%d\n",i);
                    j++;
                }
        }
        if(j==0){
            printf("-1\n");
        }

    }
return 0;
}




/*Problem Name: Subtract Titan
Problem: In the district of Shiganshina, where the remnants of humanity lived behind towering walls 
to protect themselves from the Titans. One afternoon, Eren sat in his room in the barracks of the 
Survey Corps, he found himself grappling with a perplexing problem involving numbers. Frustration 
creased his brow as he tried to decipher the intricate algorithm laid out before him. With each 
attempt to solve it, he seemed to only dig himself deeper into a pit of confusion. Mikasa, ever 
perceptive to Eren's struggles, noticed his distress and approached him with a gentle determination. 
Mikasa glanced at the problem, her mind quickly assessing the situation. Without hesitation, she 
pulled up a chair beside Eren and began to analyze the problem herself. Mikasa subtracts one from a 
number by the following algorithm:
if the last digit of the number is non-zero, she decreases the number by one;
if the last digit of the number is zero, she removes the last digit.
You are given an integer number n. Mikasa will subtract one from it k times. Your task is to print 
the result after all k subtractions.
It is guaranteed that the result will be positive integer number.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        long int num,k;
        scanf("%ld %ld",&num,&k);

        while(k--){
            int temp = num%10;
            if(temp==0){
                num = num/10;
            }
            else{
                num = num-1;
            }
        }
        printf("%ld\n",num);
    }
return 0;
}


/*Problem name: Sun of Digit Squares in Range.
Given two integers a and b, where a ≤ b, find how many numbers in the range [a, b] 
have the sum of the squares of their digits divisible by 5.
*/
#include<stdio.h>
int main(){
    int a,b;
    scanf("%d %d",&a,&b);
    int count = 0;

    for(int i=a; i<=b; i++){
            a=i;
            int sum = 0;
        while(a){
            int temp=a%10;
            sum = sum + (temp*temp);
            a=a/10;
        }
        if(sum%5==0){
            count++;
        }
    }
    printf("%d\n",count);
return 0;
}


/*Problem Name: Number Reduction
Shinchan has an integer X with him. He can perform the following two types of 
modifications to it, however many times he likes and in any order:
If X>3, subtract 3 from X. If X is even, divide X by 2.
Find the minimum possible value of X, shinchan can make after performing the 
given operations several times.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int num;
        scanf("%d",&num);
        while(num){
            if(num<=3){
                if(num%2==0){
                num = num/2;
                }
                else{
                    break;
                }
            }

            else{
                if(num%2==0){
                    num = num/2;
                }
                else{
                    num = num-3;
                }
            }
    }
    printf("%d\n",num);

    }
return 0;
}




/*problem Name: Digit product (Excluding Zeros)
problem: Given an integer T — the number of test cases — and then T integers, for each integer N, 
calculate the product of its digits, excluding any zeros.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int num;
        scanf("%d",&num);
        long long int product=1;

        while(num){
            int temp = num%10;
            num = num/10;
            if(temp!=0){
                product = product*temp;
            }
        }
        printf("%lld\n",product);
    }
return 0;
}


/*Escape the Haunted House
Problem Name: Ayesha is trapped in a haunted house! The only way to escape is by unlocking the 
magic doors with passwords.
But there's a problem Ayesha doesnt know math. Your task is to help Ayesha by finding all the 
magic passwords that can help her escape.
A password is a positive integer that is equal to the sum of its proper divisors (excluding itself).
For example:
28 is a password because 1 + 2 + 4 + 7 + 14 = 28. 8 is not a password because 1 + 2 + 4 = 7
*/
#include<stdio.h>
int main(){
    int num;
    scanf("%d",&num);

    int count = 0;
    for(int i=1; i<=num; i++){
        int n=0;
        for(int j=1; j<i; j++){
            if(i%j==0){
                n = n+j;
            }
        }
        if(n==i){
            printf("%d ",i);
            count++;
        }
    }
    if(count==0){
        printf("DIE\n");
    }
  return 0;
}



/*Problem name: Beautiful Paris
In the enchanting land of Honeycomb City, bees are not only busy but also quite fond 
of forming special friendships. Every bee has a unique ID number ranging from 1 to N.
 According to ancient honeybee tradition, two bees become a “beautiful pair” if the 
 sum of their ID numbers is perfectly divisible by a sacred number K.
The Queen Bee has announced a grand celebration and wants to know how many such 
beautiful pairs exist in the hive. Your job is to help the Royal Bee Counter by finding 
the number of beautiful pairs that can be formed.
Can you assist the hive in making this celebration buzz-worthy?
*/
#include<stdio.h>
int main(){
    int num,k;
    scanf("%d %d",&num,&k);
    int count=0;

    for(int i=1; i<=num; i++){
        for(int j=i+1; j<=num; j++){
            int sum = i+j;
            if(sum%k==0){
                count++;
            }
        }
    }
    printf("%d\n",count);
return 0;
}



/*Problem Name: Village Bell Rings
Problem: In the peaceful village of Sonargram, life moves at the rhythm of a large bell hanging 
in the center of the square. This bell is not just for decoration—it plays a vital role in daily 
life. Every hour, the bell rings exactly as many times as the current hour. For instance, 
at 1 o'clock it rings once, at 2 o'clock it rings twice, and so on. The villagers rely on these 
bell rings to know the time, as very few own watches or phones.
Every day, the bellman—an old but sharp man named Badrul—ensures the bell rings correctly from 
sunrise to sunset. However, today he’s feeling under the weather and has asked for your help in 
calculating how many times the bell will ring in a given number of hours.
Can you help Badrul determine the total number of bell rings from hour 1 to hour N?
*/
#include<stdio.h>
int main(){
    int n;
    scanf("%d",&n);
    int sum=0;

    for(int i=1; i<=n; i++){
        sum = sum+i;
    }
    printf("%d\n",sum);
return 0;
}


/*Problem Name: The Wizard's magical Clue
Problem: Once upon a time, in a faraway land, there was a great wizard who had a magical number. 
The number was so powerful that it could grant any wish of the person who possessed it. The 
wizard was very protective of this number and had hidden it somewhere in his enchanted castle.
One day, a young and brave knight named Jack decided to embark on a quest to find the magical number.
 After many adventures, Jack finally discovered a secret scroll that contained a clue to its location. 
 But the clue was encrypted!
The scroll had a list of several numbers, and for each number, Jack had to find out how many times a 
specific digit appeared in that number. Only by solving all the clues correctly can Jack proceed to 
the next stage of his quest.
Your task is to help Jack solve all the scroll's clues.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);
    int i=1;
    while(t--){
        long int num,k;
        scanf("%ld %ld",&num,&k);
        int count=0;

        while(num){
            int temp = num%10;
            num = num/10;

            if(temp==k){
                count++;
            }
        }

        printf("Case %d: %d\n",i,count);
        i++;
    }
return 0;
}


/*Problem Name: Ticket Timer
Problem: You are standing in a queue that is infinitely long, waiting to get tickets for various events. 
The ticket distribution follows these rules:
*) Every second, tickets are given to the 1st and 3rd persons in the queue.
*) After receiving their tickets, those people leave the queue.
*) The person who was originally in the 2nd position (before the 1st and 3rd people left) moves up to the 1st position.
*) This process repeats every second, with the 1st and 3rd persons receiving tickets and leaving.
Initially, you are at position N in the queue.
Determine after how many seconds you will get the tickets.
*
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int n;
        scanf("%d",&n);
        int count =0;

        while(1){
        if(n<3){
              if(n==1){
                count++;
                break;
              }
              else{
                n=n-1;
                count++;
              }

        }
        else{
            if(n==3){
                count++;
                break;
            }
            else{
            n=n-2;
            count++;
            }
        }
        }
        printf("%d\n",count);
    }
return 0;
}



/*Problem Name: Reverse Match
Problem: One day, detective Ayaan discovered an ancient puzzle on a scroll that read:
“Find the pairs whose sum looks like their reversed multiplication!”
Confused but curious, Ayaan realized the scroll hinted at a mysterious relationship 
between two numbers. He needs your help to solve this enigma.
You are given a number N. Your task is to find all pairs (a, b) such that:
1 ≤ a < b < N
a × b = reverse(a + b)
Here, reverse(x) means the digits of x reversed. For example, reverse(123) = 321.
Help Ayaan by writing a program that lists all such pairs.
*/
#include<stdio.h>
int main(){
    int n;
    scanf("%d",&n);
    int count=0;
    for(int i=1; i<n; i++){

        for(int j=i+1; j<=n; j++){
            int sum = i+j;
            int rev = 0;
            while(sum){
                int t = sum%10;
                sum=sum/10;
                rev = (rev*10)+t;
            }

            int sum2 = i*j;
            if(sum2 == rev){
                printf("%d %d\n",i,j);
                count++;
            }
        }
    }
    if(count==0){
        printf("-1\n");
    }
return 0;
}


/*Problem Name: Candy Counter
Problem: A magician is testing his magic boxes. Each box contains a certain number of candies, and 
he arranges them in rows.
The magician gives you a number R — the number of rows.
The magician places C = R + 1 candies in row 1, C + 1 in row 2, C + 2 in row 3, and so on…
You need to:
1) Print how many candies are in each row.
2) Print the total number of candies.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int i=1;
        int n;
        scanf("%d",&n);
        int j=n+1;
        int total=0;
        for(int i=1; i<=n; i++){
                total=total+j;
            printf("Row %d has %d candies\n",i,j);
            j++;

        }
        printf("Total = %d\n",total);
    }
return 0;
}


/*Problem Name: The GCD Test
Problem: In the land of Greed Island, two friends — Gon and Killua — love testing numbers. 
Every day, they pick two numbers and find their Greatest Common Divisor (GCD) to see how 
"compatible" the numbers are.
They are given two numbers. Their job is to print the GCD of those two numbers.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int a,b;
        scanf("%d %d",&a,&b);
        int gcd=0;
        if(a<b){
        for(int i=1; i<=a; i++){
            if(a%i==0 && b%i==0){
                gcd=i;
            }
        }
        }
        else{
            for(int i=1; i<=b; i++){
            if(a%i==0 && b%i==0){
                gcd=i;
            }
        }
        }
        printf("GCD = %d\n",gcd);
    }
return 0;
}



/*Problem Name: Buzzing Bees
Problem: In a magical garden, there are N rows of flowers. Each row has exactly M flowers. 
A bee visits every flower one by one and collects honey from it.
Each flower takes exactly 2 seconds to collect honey from.
Your task is to calculate:
1) How many flowers the bee visits in total
2) How much time the bee takes to finish all the work
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int a,b;
        scanf("%d %d",&a,&b);
        printf("Total flowers = %d, Total time = %d seconds\n",a*b,(a*b)*2);
    }
return 0;
}



/*Problem Name: Decode The code
Problem: One evening, while walking home, Faysal and Shezan discovered a mysterious glowing box 
in the middle of the road. Faysal picked it up and examined it, noting its ancient-looking lock 
combined with a modern digital screen. The screen displayed a challenge:
"To open the box, you must prove your wisdom. Enter three distinct numbers given range (x, y) 
based on a formula."
Shezan, skilled in mathematics, quickly discovered the formula required: (a, b, c) where a^2+b^2= c^2, 
with no duplicates
Since neither Faysal nor Shezan are programmers, they need assistance in writing a program. Your task 
is to develop a program that determines three distinct integers, a, b, and c, that satisfy the condition 
a^2+b^2=c^2 within a given range (x, y).
*/
#include<stdio.h>
int main(){
    int a,b;
    scanf("%d %d",&a,&b);
    int count =0;
    for(int i=a; i<=b; i++){
        int A = i*i;
        for(int j=i; j<=b; j++){
            int B = j*j;
            for(int k=j; k<=b; k++){
                int C = k*k;
                if(A+B==C){
                        count++;
                    printf("%d %d %d\n",i,j,k);
                }

            }
        }
    }
    if(count==0){
        printf("FAILED\n");
    }
return 0;
}



/*Problem Name: The Big Addition
Problem: You are given a set of test cases. For each test case, you will receive a number of 
integer pairs. Your task is to form two large numbers by concatenating the first elements of 
each pair to create the first number and the second elements to create the second number. 
Finally, you should compute the sum of these two large numbers and output the result.

Explanation In the example:
The first number is formed by concatenating the first elements of each pair: 1, 2, and 3, 
which gives the number 123.
The second number is formed by concatenating the second elements of each pair: 5, 6, and 9, 
which gives the number 569.
The sum of 123 and 569 is 692.
*/
#include<stdio.h>
int main(){
    int t;
    scanf("%d",&t);

    while(t--){
        int k;
        scanf("%d",&k);
        int A=0,B=0;

        while(k--){
            int a,b;
            scanf("%d %d",&a,&b);
            A = (A*10)+a;
            B = (B*10)+b;

        }
        int num = A+B;
        printf("%d\n",num);
    }
return 0;
}



/*Problem Name: Unique Time Format
Problem: You're building a digital clock that only shows times where all digits are different.
Your task is to use loops to print all valid times in 12-hour format (HH:MM) such that:
The time is valid (00:00 to 11:59)
All 4 digits used in HH:MM are distinct
Leading zeroes must be shown (e.g., 01:23 is valid and should be printed)
*/
#include<stdio.h>
int main(){
    for(int i=0; i<=1; i++){
        for(int j=0; j<=9; j++){
                if(i==1 && j==2){
                    break;
                }

            for(int m=0; m<=5; m++){

                for(int m2=0; m2<=9; m2++){
                        if(i!=j && j!=m && m!=m2 && i!=m && i!=m2 &&j!=m2){
                   printf("%d%d:%d%d\n",i,j,m,m2);
                        }
                }
            }
        }
    }
return 0;
}



/*Problem Name: Swap and print
Problem: Write a program which reads two integers x and y, and prints them in ascending order.

Input Format: The input consists of multiple datasets. Each dataset consists of two integers 
x and y separated by a single space.
The input ends with two 0 (when both x and y are zero). Your program should not process for 
these terminal symbols.
*/
#include<stdio.h>
int main(){
    while(1){
        int a,b;
        scanf("%d %d",&a,&b);



        if(a==0 && b==0){
            break;
        }
        else{
            if(a>b){
                printf("%d %d\n",b,a);
            }
            else{
                printf("%d %d\n",a,b);
            }
        }
    }
return 0;
}




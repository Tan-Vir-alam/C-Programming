Contest No: 01.
/*Arif is a first-year Computer Science student at Tejgaon College. He's just joined the Programming Club
Workshop and is super excited to write his very first C program. While cleaning up his grandfather's old 
study desk, he finds an old diary. Inside, there's a special date written with the note:
"The day I made my first invention — never forget this day!"
Output: Date: 24/04/2O25
Day: Thursday*/
#include<stdio.h>
int main(){
    printf("Date: 24\\04\\2O25\n\n");
    printf("Day: Thursday\n");
return 0;
}

/*print Sheikh Hasina wrote, " I have resigned!".
*/
#include<stdio.h>
int main(){
    printf("Sheikh Hasina wrote, \" I have resigned!\".\n");
return 0;
}

/*From now, you all start your Coding Journey. We all wish you good luck. Just remember one thing Never Give Up.
Just print a line saying "Never Give Up" (without the quotation marks).
*/
#include<stdio.h>
int main(){
    printf("Never Give Up\n");
return 0;
}




//Contest No: 02.
/*Write a program that can provide the right multiplication table from 1 to 10 according to the given Integer.
Input: The first line of the input contains a single integer t (1≤t≤10^9)
*/
#include<stdio.h>
int main(){
    long int t;
    scanf("%ld",&t);
    printf("%ld * 1 = %ld\n",t,t*1);
    printf("%ld * 2 = %ld\n",t,t*2);
    printf("%ld * 3 = %ld\n",t,t*3);
    printf("%ld * 4 = %ld\n",t,t*4);
    printf("%ld * 5 = %ld\n",t,t*5);
    printf("%ld * 6 = %ld\n",t,t*6);
    printf("%ld * 7 = %ld\n",t,t*7);
    printf("%ld * 8 = %ld\n",t,t*8);
    printf("%ld * 9 = %ld\n",t,t*9);
    printf("%ld * 10 = %ld\n",t,t*10);
return 0;
}

/*Nihad went to a sweet shop because he always craves to eat sweets. This is not good for his health as he has diabetes,
but he doesn't care. A laddu costs Rs. 10 while a jalebi costs Rs. 20.
Initially, Nihad had Rs. X, but then Nihad bought N laddus, how many jalebis can he buy with the remaining money?
*/
#include<stdio.h>
int main(){
    int X,N,Y;
    scanf("%d%d",&X,&N);
    int x = N*10;
    Y = (X-x)/20;
    printf("%d\n",Y);
return 0;
}

/*You just bought a new calculator, but it seems to have a small problem: all its results have an extra 1 appended to the end.
For example, if you ask it for 3 + 5, It'll print 81, and 4 + 12 will result in 161.
Given A and B, can you predict what the calculator will print when you ask it for A+B?
*/
#include<stdio.h>
int main(){
    int A,B;
    scanf("%d%d",&A,&B);
    printf("%d1\n",A+B);
return 0;
}

/*Rifat, Eibrahim, and Aashik have deposits in a bank.
Rifat and Eibrahim receive 15% simple interest on their deposits.
Aashik receives 20% simple interest on his deposit.
You are given their deposits.
After adding the interest, calculate the total amount of each friend.

Then, calculate:
Total amount of Rifat
Total amount of Eibrahim
Total amount of Aashik
Finally, just print these final amounts.
*/
#include<stdio.h>
int main(){
    int R,E,A;
    scanf("%d",&R);
    scanf("%d",&E);
    scanf("%d",&A);
    float Rifat_total = (R*0.15)+R;
    float Eibrahim_total = (E*0.15)+E;
    float Aashik_total = (A*0.20)+A;
    printf("Rifat's Final Amount = %.3f tk\n",Rifat_total);
    printf("Eibrahim's Final Amount = %.3f tk\n",Eibrahim_total);
    printf("Aashik's Final Amount = %.3f tk\n",Aashik_total);
return 0;
}

/*In the world of hunters, Sung Rykar has taken on a massive challenge: clearing multiple dungeons in a single day!
Without using teleportation magic, Rykar has to walk from one dungeon to the next — step by step.
Today, Rykar plans to conquer three dungeons.
The times he needs to walk between them are:
T1​ minutes to reach the first dungeon,
T2 minutes to reach the second dungeon,
T3 minutes to reach the third dungeon.
You must help Rykar calculate the total time, how many hours and minutes he spends walking today!

Input: Three integers T1, T2, T3 — the times (in minutes) Rykar takes to walk to each dungeon, where:
0 ≤ T1,T2,T3 ≤ 10^10
*/
#include<stdio.h>
int main(){
    long int T1,T2,T3;
  scanf("%ld%ld%ld",&T1,&T2,&T3);
    long int x=T1+T2+T3;
    int X=x/60;
    int Y= x%60;
    printf("%d Hour %d Minute\n",X,Y);
return 0;
}

/*You are given n. Find the value of x.
x=n^2
Input: The only line of input contains —n (1<=N<=10^19).
Output: Print one line containing the value of x
*/
#include<stdio.h>
int main(){
   long long int n,x;
    scanf("%lld",&n);
    x = n*n;
    printf("%lld\n",x);
return 0;
}

/*The kingdom of Eldoria faces dark days. Three great cities- Valoria, Nemoris, and Eryndor- must be protected
before the beasts of the abyss arrive. The king has ordered you, the royal Engineer, to build protective walls around
each city. Each wall must cover a perfect  rectangle: the length and width needed for each city are given to you by
the Royal Messenger. For magical reinforcement, each square meter of wall requires exactly 3 gold coins.
After building all three walls: The Royal Treasurer will ask you for the total cost of all walls combined.
*/
#include<stdio.h>
int main(){
    long int Vl,Vw,Nl,Nw,El,Ew,V,N,E;
    scanf("%ld%ld%ld%ld%ld%ld",&Vl,&Vw,&Nl,&Nw,&El,&Ew);
    V = Vl*Vw*3;
    N = Nl*Nw*3;
    E = El*Ew*3;
    long int Total = V+N+E;
    printf("Valoria: %ld\n",V);
    printf("Nemoris: %ld\n",N);
    printf("Eryndor: %ld\n",E);
    printf("Grand Total: %ld\n",Total);
return 0;
}

/*you need is the last two digits. Nothing more, nothing less."
Your task is to help Link find the last two digits of the given
number and display it in the exact format Zelda requested — with quotation marks!
Input: A single integer n (10 ≤ n ≤ 10^18)
Output: Print exactly:
"The last digit is x"
Where x is the last two digits of n. If there is a zero in the 2nd last number,
print only one digit The output must end with a endline.
*/
#include<stdio.h>
int main(){
    long long int n,x;
    scanf("%lld",&n);
    x = n%100;
    printf("\"The last digit is %lld\"\n",x);
return 0;
}



//COntest No: 03.
/*Elara has C chocolates and wants to pack them into boxes.
Each box can hold up to B chocolates. She wants to use as few boxes as possible.
Your task is to help her find the minimum number of boxes needed.
*/
#include<stdio.h>
#include<math.h>
int main(){
    float x,y;
    scanf("%f%f",&x,&y);
    float a = (ceil)(x*1.0/y);
    printf("%.0f",a);

return 0;
}
/*Alice has n candies, and she wants to distribute them equally among k kids. Each kid should get the same number of 
whole candies, and leftover candies (if any) will be kept by Alice.
Your task is to find out:
1. How many candies each kid gets.
2. How many candies are left with Alice.
*/
#include<stdio.h>
int main(){
    long int x,y;
    scanf("%ld%ld",&x,&y);
    long int a = x/y;
    long int b = x%y;
    printf("%ld candy per kid\n",a);
    printf("%ld left with Alice\n",b);
return 0;
}

/*In a distant land, there was a small village nestled between mountains. The villagers often spoke of a mysterious vault 
hidden deep within the heart of an ancient forest. For generations, the vault had remained locked, and no one knew 
what treasures it contained.
One day, a young adventurer named John came across the entrance to the vault while exploring the woods. The 
entrance had an inscription, but there was no obvious key or way to open it. Upon closer inspection, he noticed a 
sequence of numbers carved into the stone door. The numbers looked simple enough at first, but upon further 
inspection, John realized that the vault would only open if he could unlock the mystery of these numbers.
The numbers were a 4-digit code, but they were not random. The inscription hinted at a pattern: the sum of the digits 
of the number carved on the door. However, John quickly realized that the sum of the digits wasn’t a simple calculation. 
The secret to unlocking the vault lay in understanding the hidden logic behind the sequence. The digits were not just 
random; they were part of a larger puzzle that had to be cracked to unlock the door.
John knew that the task wouldn’t be easy. He needed your help to calculate the sum of the digits based on the number 
provided. He believed that solving this riddle would unlock the vault and allow him to claim the treasures hidden within!
*/

#include<stdio.h>
int main(){
    int x;
    scanf("%d",&x);
    int a = x%10;
    int b = (x/10)%10;
    int c = (x/100)%10;
    int d = (x/1000)%10;
    int ans = a+b+c+d;
    printf("%d\n",ans);
return 0;
}

/*You're a bit all over the place as a college student. You used to eat out at expensive restaurants almost every day until 
your parents gave you a talking-to about being irresponsible. Now, you've got to control your eating and spending habits.
So, here's the plan: you'll stick to the college mess for your meals every day, except Sundays. On Sundays, you're 
treating yourself to those fancy restaurant meals.
The cost is Rs. X for the mess food each day, and Rs. Y for the restaurant splurges.
Now, what's the cost of food per week? Note that you don't have to pay for the mess on Sundays.
A week has seven days, as usual.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d%d",&x,&y);
    int a = (x*6);
    int b = a+y;
    printf("%d\n",b);
return 0;
}

/*In the heart of London, under the foggy evening sky, a special contest was arranged by Scotland Yard.
Detectives from around the world gathered, but only one man truly mattered — Sherlock Holmes.
Inspector Lestrade, eager to truly test Sherlock’s unparalleled skills, presented him with a series of intricate cases — puzzles involving missing jewels, coded messages, and locked-room mysteries.
Each problem was crafted to challenge even the sharpest mind.

However, not even Sherlock is beyond human limits.
Despite his brilliance, there were a few rare cases he decided not to pursue, deeming them either too trivial or a waste of his time.

You are provided with:
N — the total number of cases presented to Sherlock,
P — the number of cases he chose not to solve.
Your mission is to calculate the percentage of cases Sherlock successfully solved, and thus, judge his performance in this grand contest of intellect.
*/
#include<stdio.h>
int main(){
    long long int x,y;
    scanf("%lld%lld",&x,&y);
    float b = (y*100)/(x*1.0);
    float a = (100-b);
    printf("%.2lf%%\n",a);
return 0;
}

/*In the realm of C programming, precision becomes an intriguing dilemma, embark on a journey through the Precision 
Playground. Your task is to craft a program that takes a floating-point number X as input and calculates its square root.
Your mission is to print the square root with up to 10 digits after the decimal point. Break down the result into two lines:
the first line should display the square root, and the second line should showcase the value after the decimal point.
340+ Square Root Stock Photos, Pictures & Royalty-Free Images - iStock |  Square root symbol, Square root math, Square root calculator
Embark on the Precision Dilemma and unravel the intricacies of numerical representation in C. Will your solution 
delicately balance the trade-off between precision and efficiency?
*/
#include<stdio.h>
int main(){
    double x;
    scanf("%lf",&x);
    double a = sqrt(x);
    printf("Square root: %.10lf\n",a);
    int b = a;
    double aa = (a-b)*10000000000;
    printf("Decimal part: %.0f\n",aa);
return 0;
}

/*Alex and Ben are two best friends who love solving programming problems together. One sunny afternoon, while
sitting in the park, Alex challenged Ben:
"Tell me two numbers, and I’ll immediately tell you which one is bigger!"
Ben thought, “That’s easy!” Now your task is to help Alex by writing a program that takes two numbers and prints
out the maximum one.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d%d",&x,&y);
    int ans = (x+y+abs(x-y))/2;
    printf("%d\n",ans);
return 0;
}

/*Input: 1. A single line containing two real numbers a and b.
2. Constraints: -10^6 ≤ a, b ≤ 10^6, b ≠ 0.
3. Both numbers may have up to 6 digits after the decimal point.

Output: a) Print exactly four lines:
1.The sum of a and b.
2. The difference between a and b.
3. The product of a and b.
4. The quotient of a divided by b.
b) Each result must be displayed with exactly four digits after the decimal point, even if trailing zeroes 
are needed.
c) Important: Make sure your answers are properly rounded, not simply truncated!
See the input/output section for more clarification
*/
#include<stdio.h>
int main(){
    double x,y;
    scanf("%lf%lf",&x,&y);
    double a = x+y;
    printf("%.4lf\n",a);
    double b = (x-y);
    printf("%.4lf\n",b);
    double c = (x*y);
    printf("%.4lf\n",c);
    double d = (x/y);
    printf("%.4lf\n",d);
return 0;
}

/*Programmers are actually leaving their physical bodies when they program. They transcend to another dimension
where their soul meets the codes. They sit on a chair for hours trying to come up with different logic to approach
or solve a problem. They don’t do any cardio to keep in shape. Their only motto is,
’Coding’ is my ‘cardio’.
Output: 'Coding' is my 'cardio'.
*/

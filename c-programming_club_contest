Contest No: 01.
/*Arif is a first-year Computer Science student at Tejgaon College. He's just joined the Programming Club
Workshop and is super excited to write his very first C program. While cleaning up his grandfather's old 
study desk, he finds an old diary. Inside, there's a special date written with the note:
"The day I made my first invention — never forget this day!"
Output: Date: 24/04/2O25
Day: Thursday*/
#include<stdio.h>
int main(){
    printf("Date: 24\\04\\2O25\n\n");
    printf("Day: Thursday\n");
return 0;
}

/*print Sheikh Hasina wrote, " I have resigned!".
*/
#include<stdio.h>
int main(){
    printf("Sheikh Hasina wrote, \" I have resigned!\".\n");
return 0;
}

/*From now, you all start your Coding Journey. We all wish you good luck. Just remember one thing Never Give Up.
Just print a line saying "Never Give Up" (without the quotation marks).
*/
#include<stdio.h>
int main(){
    printf("Never Give Up\n");
return 0;
}




//Contest No: 02.
/*Write a program that can provide the right multiplication table from 1 to 10 according to the given Integer.
Input: The first line of the input contains a single integer t (1≤t≤10^9)
*/
#include<stdio.h>
int main(){
    long int t;
    scanf("%ld",&t);
    printf("%ld * 1 = %ld\n",t,t*1);
    printf("%ld * 2 = %ld\n",t,t*2);
    printf("%ld * 3 = %ld\n",t,t*3);
    printf("%ld * 4 = %ld\n",t,t*4);
    printf("%ld * 5 = %ld\n",t,t*5);
    printf("%ld * 6 = %ld\n",t,t*6);
    printf("%ld * 7 = %ld\n",t,t*7);
    printf("%ld * 8 = %ld\n",t,t*8);
    printf("%ld * 9 = %ld\n",t,t*9);
    printf("%ld * 10 = %ld\n",t,t*10);
return 0;
}

/*Nihad went to a sweet shop because he always craves to eat sweets. This is not good for his health as he has diabetes,
but he doesn't care. A laddu costs Rs. 10 while a jalebi costs Rs. 20.
Initially, Nihad had Rs. X, but then Nihad bought N laddus, how many jalebis can he buy with the remaining money?
*/
#include<stdio.h>
int main(){
    int X,N,Y;
    scanf("%d%d",&X,&N);
    int x = N*10;
    Y = (X-x)/20;
    printf("%d\n",Y);
return 0;
}

/*You just bought a new calculator, but it seems to have a small problem: all its results have an extra 1 appended to the end.
For example, if you ask it for 3 + 5, It'll print 81, and 4 + 12 will result in 161.
Given A and B, can you predict what the calculator will print when you ask it for A+B?
*/
#include<stdio.h>
int main(){
    int A,B;
    scanf("%d%d",&A,&B);
    printf("%d1\n",A+B);
return 0;
}

/*Rifat, Eibrahim, and Aashik have deposits in a bank.
Rifat and Eibrahim receive 15% simple interest on their deposits.
Aashik receives 20% simple interest on his deposit.
You are given their deposits.
After adding the interest, calculate the total amount of each friend.

Then, calculate:
Total amount of Rifat
Total amount of Eibrahim
Total amount of Aashik
Finally, just print these final amounts.
*/
#include<stdio.h>
int main(){
    int R,E,A;
    scanf("%d",&R);
    scanf("%d",&E);
    scanf("%d",&A);
    float Rifat_total = (R*0.15)+R;
    float Eibrahim_total = (E*0.15)+E;
    float Aashik_total = (A*0.20)+A;
    printf("Rifat's Final Amount = %.3f tk\n",Rifat_total);
    printf("Eibrahim's Final Amount = %.3f tk\n",Eibrahim_total);
    printf("Aashik's Final Amount = %.3f tk\n",Aashik_total);
return 0;
}

/*In the world of hunters, Sung Rykar has taken on a massive challenge: clearing multiple dungeons in a single day!
Without using teleportation magic, Rykar has to walk from one dungeon to the next — step by step.
Today, Rykar plans to conquer three dungeons.
The times he needs to walk between them are:
T1​ minutes to reach the first dungeon,
T2 minutes to reach the second dungeon,
T3 minutes to reach the third dungeon.
You must help Rykar calculate the total time, how many hours and minutes he spends walking today!

Input: Three integers T1, T2, T3 — the times (in minutes) Rykar takes to walk to each dungeon, where:
0 ≤ T1,T2,T3 ≤ 10^10
*/
#include<stdio.h>
int main(){
    long int T1,T2,T3;
  scanf("%ld%ld%ld",&T1,&T2,&T3);
    long int x=T1+T2+T3;
    int X=x/60;
    int Y= x%60;
    printf("%d Hour %d Minute\n",X,Y);
return 0;
}

/*You are given n. Find the value of x.
x=n^2
Input: The only line of input contains —n (1<=N<=10^19).
Output: Print one line containing the value of x
*/
#include<stdio.h>
int main(){
   long long int n,x;
    scanf("%lld",&n);
    x = n*n;
    printf("%lld\n",x);
return 0;
}

/*The kingdom of Eldoria faces dark days. Three great cities- Valoria, Nemoris, and Eryndor- must be protected
before the beasts of the abyss arrive. The king has ordered you, the royal Engineer, to build protective walls around
each city. Each wall must cover a perfect  rectangle: the length and width needed for each city are given to you by
the Royal Messenger. For magical reinforcement, each square meter of wall requires exactly 3 gold coins.
After building all three walls: The Royal Treasurer will ask you for the total cost of all walls combined.
*/
#include<stdio.h>
int main(){
    long int Vl,Vw,Nl,Nw,El,Ew,V,N,E;
    scanf("%ld%ld%ld%ld%ld%ld",&Vl,&Vw,&Nl,&Nw,&El,&Ew);
    V = Vl*Vw*3;
    N = Nl*Nw*3;
    E = El*Ew*3;
    long int Total = V+N+E;
    printf("Valoria: %ld\n",V);
    printf("Nemoris: %ld\n",N);
    printf("Eryndor: %ld\n",E);
    printf("Grand Total: %ld\n",Total);
return 0;
}

/*you need is the last two digits. Nothing more, nothing less."
Your task is to help Link find the last two digits of the given
number and display it in the exact format Zelda requested — with quotation marks!
Input: A single integer n (10 ≤ n ≤ 10^18)
Output: Print exactly:
"The last digit is x"
Where x is the last two digits of n. If there is a zero in the 2nd last number,
print only one digit The output must end with a endline.
*/
#include<stdio.h>
int main(){
    long long int n,x;
    scanf("%lld",&n);
    x = n%100;
    printf("\"The last digit is %lld\"\n",x);
return 0;
}



//COntest No: 03.
/*Elara has C chocolates and wants to pack them into boxes.
Each box can hold up to B chocolates. She wants to use as few boxes as possible.
Your task is to help her find the minimum number of boxes needed.
*/
#include<stdio.h>
#include<math.h>
int main(){
    float x,y;
    scanf("%f%f",&x,&y);
    float a = (ceil)(x*1.0/y);
    printf("%.0f",a);

return 0;
}
/*Alice has n candies, and she wants to distribute them equally among k kids. Each kid should get the same number of 
whole candies, and leftover candies (if any) will be kept by Alice.
Your task is to find out:
1. How many candies each kid gets.
2. How many candies are left with Alice.
*/
#include<stdio.h>
int main(){
    long int x,y;
    scanf("%ld%ld",&x,&y);
    long int a = x/y;
    long int b = x%y;
    printf("%ld candy per kid\n",a);
    printf("%ld left with Alice\n",b);
return 0;
}

/*Little Alex has just started learning programming. Today, he learned about even and odd numbers. To practice,
he wants to write a simple program that tells whether a given number is even or odd.
However, Alex accidentally deleted his code! He remembers the logic, but not how to implement it. Can you help
Alex complete his task?
You are given an integer n. Your job is to:
1. Print 1 if the number is even.
2. Print 0 if the number is odd.
*/
#include<stdio.h>
int main(){
    int x;
    scanf("%d",&x);
    int ans = ((x%2)+1)%2;
    printf("%d\n",ans);
return 0;
}

/*In a distant land, there was a small village nestled between mountains. The villagers often spoke of a mysterious vault 
hidden deep within the heart of an ancient forest. For generations, the vault had remained locked, and no one knew 
what treasures it contained.
One day, a young adventurer named John came across the entrance to the vault while exploring the woods. The 
entrance had an inscription, but there was no obvious key or way to open it. Upon closer inspection, he noticed a 
sequence of numbers carved into the stone door. The numbers looked simple enough at first, but upon further 
inspection, John realized that the vault would only open if he could unlock the mystery of these numbers.
The numbers were a 4-digit code, but they were not random. The inscription hinted at a pattern: the sum of the digits 
of the number carved on the door. However, John quickly realized that the sum of the digits wasn’t a simple calculation. 
The secret to unlocking the vault lay in understanding the hidden logic behind the sequence. The digits were not just 
random; they were part of a larger puzzle that had to be cracked to unlock the door.
John knew that the task wouldn’t be easy. He needed your help to calculate the sum of the digits based on the number 
provided. He believed that solving this riddle would unlock the vault and allow him to claim the treasures hidden within!
*/

#include<stdio.h>
int main(){
    int x;
    scanf("%d",&x);
    int a = x%10;
    int b = (x/10)%10;
    int c = (x/100)%10;
    int d = (x/1000)%10;
    int ans = a+b+c+d;
    printf("%d\n",ans);
return 0;
}

/*You're a bit all over the place as a college student. You used to eat out at expensive restaurants almost every day until 
your parents gave you a talking-to about being irresponsible. Now, you've got to control your eating and spending habits.
So, here's the plan: you'll stick to the college mess for your meals every day, except Sundays. On Sundays, you're 
treating yourself to those fancy restaurant meals.
The cost is Rs. X for the mess food each day, and Rs. Y for the restaurant splurges.
Now, what's the cost of food per week? Note that you don't have to pay for the mess on Sundays.
A week has seven days, as usual.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d%d",&x,&y);
    int a = (x*6);
    int b = a+y;
    printf("%d\n",b);
return 0;
}

/*In the heart of London, under the foggy evening sky, a special contest was arranged by Scotland Yard.
Detectives from around the world gathered, but only one man truly mattered — Sherlock Holmes.
Inspector Lestrade, eager to truly test Sherlock’s unparalleled skills, presented him with a series of intricate cases — puzzles involving missing jewels, coded messages, and locked-room mysteries.
Each problem was crafted to challenge even the sharpest mind.

However, not even Sherlock is beyond human limits.
Despite his brilliance, there were a few rare cases he decided not to pursue, deeming them either too trivial or a waste of his time.

You are provided with:
N — the total number of cases presented to Sherlock,
P — the number of cases he chose not to solve.
Your mission is to calculate the percentage of cases Sherlock successfully solved, and thus, judge his performance in this grand contest of intellect.
*/
#include<stdio.h>
int main(){
    long long int x,y;
    scanf("%lld%lld",&x,&y);
    float b = (y*100)/(x*1.0);
    float a = (100-b);
    printf("%.2lf%%\n",a);
return 0;
}

/*In the realm of C programming, precision becomes an intriguing dilemma, embark on a journey through the Precision 
Playground. Your task is to craft a program that takes a floating-point number X as input and calculates its square root.
Your mission is to print the square root with up to 10 digits after the decimal point. Break down the result into two lines:
the first line should display the square root, and the second line should showcase the value after the decimal point.
340+ Square Root Stock Photos, Pictures & Royalty-Free Images - iStock |  Square root symbol, Square root math, Square root calculator
Embark on the Precision Dilemma and unravel the intricacies of numerical representation in C. Will your solution 
delicately balance the trade-off between precision and efficiency?
*/
#include<stdio.h>
int main(){
    double x;
    scanf("%lf",&x);
    double a = sqrt(x);
    printf("Square root: %.10lf\n",a);
    int b = a;
    double aa = (a-b)*10000000000;
    printf("Decimal part: %.0f\n",aa);
return 0;
}

/*Alex and Ben are two best friends who love solving programming problems together. One sunny afternoon, while
sitting in the park, Alex challenged Ben:
"Tell me two numbers, and I’ll immediately tell you which one is bigger!"
Ben thought, “That’s easy!” Now your task is to help Alex by writing a program that takes two numbers and prints
out the maximum one.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d%d",&x,&y);
    int ans = (x+y+abs(x-y))/2;
    printf("%d\n",ans);
return 0;
}

/*Input: 1. A single line containing two real numbers a and b.
2. Constraints: -10^6 ≤ a, b ≤ 10^6, b ≠ 0.
3. Both numbers may have up to 6 digits after the decimal point.

Output: a) Print exactly four lines:
1.The sum of a and b.
2. The difference between a and b.
3. The product of a and b.
4. The quotient of a divided by b.
b) Each result must be displayed with exactly four digits after the decimal point, even if trailing zeroes 
are needed.
c) Important: Make sure your answers are properly rounded, not simply truncated!
See the input/output section for more clarification
*/
#include<stdio.h>
int main(){
    double x,y;
    scanf("%lf%lf",&x,&y);
    double a = x+y;
    printf("%.4lf\n",a);
    double b = (x-y);
    printf("%.4lf\n",b);
    double c = (x*y);
    printf("%.4lf\n",c);
    double d = (x/y);
    printf("%.4lf\n",d);
return 0;
}

/*Programmers are actually leaving their physical bodies when they program. They transcend to another dimension
where their soul meets the codes. They sit on a chair for hours trying to come up with different logic to approach
or solve a problem. They don’t do any cardio to keep in shape. Their only motto is,
’Coding’ is my ‘cardio’.
Output: 'Coding' is my 'cardio'.
*/
#include<stdio.h>
int main(){
    printf("'Coding' is my 'cardio'.\n");
return 0;
}



//Contest No: 04;

/*Once upon a time, there was a kingdom where all the numbers lived in harmony. The even numbers were always
paired up, and the odd numbers formed their own groups. Everyone was content with their place in the kingdom.
But one day, a strange number appeared in the kingdom. Its name was n, and nobody knew whether it belonged
to the even or the odd group. The numbers were puzzled and worried that their peaceful kingdom might be in
danger.
To restore order, the numbers held a council and decided to create a special program that would determine
whether n was even or odd. They called it "The Odd One Out" program.
Your task is to write this program. Given a positive integer n, your program should output EVEN if n is even,
and ODD otherwise.
*/
#include<stdio.h>
int main(){
    long long int x;
    scanf("%lld",&x);
    long long int a = x%2;
    if(a==0){
        printf("EVEN\n");
    }
    if(a!=0){
        printf("ODD\n");
    }

return 0;
}

/*Naeem is an enthusiast when it comes to tracking the dollar's movements in the international market.Every 
morning, he starts his day by checking the latest exchange rates online.He keeps a personal notebook filled 
with dates, rates, and notes.His friends often tease him, calling him the "Dollar Detective."But Naeem doesn’t 
mind, he’s proud of his passion. He spends hours analyzing trends, trying to predict future changes.Coffee in 
hand, he stares at charts like they’re ancient maps leading to treasure.His room is filled with sticky notes,
graphs, and articles clipped from financial journals.Sometimes he even skips lunch just to finish a line of 
analysis.It’s more than a hobby, it’s almost an obsession. However, he has a peculiar habit, he dislikes dealing 
with fractional numbers. Instead, he always rounds them up to the nearest big integer and count the rate in (N^2)
to thinking it simplifies everything. One Thursday afternoon, Naeem was unusually quiet. He sat at his desk, 
flipping through his notebook with a worried face.His calculations weren’t adding up, and something felt off.
He tried again, double-checking everything, but the confusion only deepened.For the first time, his confidence 
began to shake. The sun started to set, and Naeem was still lost in thought.He looked at his screen, then at his 
messy papers.Defeated, he leaned back in his chair and sighed. Realizing he needed help, he picked up his phone.
“Sam,” he said, calling you, “I think I’m stuck. Can you help me out?” And that’s how you got pulled into Naeem’s
dollar drama. So help him.
*/
#include<stdio.h>
#include<math.h>
int main(){
    double x;
    scanf("%lf",&x);
    double a = ceil(x);
    double b = a*a;
    printf("%.2lf\n",b);
return 0;
}

/*A little turtle wants to reach its favorite pond located X meters away from its home.
The turtle can walk exactly 1, 2, 3, 4, or 5 meters in a single step.
You need to determine the minimum number of steps the turtle must take to reach exactly X meters.
However, the turtle gets tired if it takes more than 100 steps in total.
If that happens, print Tired instead of the number of steps.
*/
#include<stdio.h>
#include<math.h>
int main(){
    int x;
    scanf("%d",&x);
    double a = ceil(x/5.00);
    if(a>100){
        printf("Tired\n");
    }
    if(a<=100){
        printf("%.0lf\n",a);
    }

return 0;
}

/*It’s another quiet night inside Fox River Penitentiary, and Michael Scofield is conducting a trial run for his
escape plan — testing each route, each turn, without actually fleeing the prison. He begins at his cell block,
which is located at coordinate (0, 0) on a 2D grid representing the prison layout.
He follows a path as part of the simulation. He will do the following moves:
1. first, A units along positive X axis
2. then, B units along positive Y axis
3. then, C units along negative X axis
4. finally, D units along negative Y axis
Find his final coordinates after this trial. If Michael successfully returns to his starting point without being
caught i.e. ends up at (0, 0), print an additional line:
Preparation can only take you so far, after that you’ve got to take a few leaps of faith.
*/
#include<stdio.h>
int main(){
    int a,b,c,d;
    scanf("%d%d%d%d",&a,&b,&c,&d);
    int x = a-c;
    int y = b-d;
    printf("%d ",x);
    printf("%d\n",y);
    if(x == 0){
        printf("Preparation can only take you so far, after that you’ve got to take a few leaps of faith.\n");
    }

return 0;
}

/*In a hidden library of ancient formulas, a mathematician uncovered a powerful equation:
Y = ((a^b)/b)
Where a and b are integers, and a is raised to the power of b, then divided by b.
The mathematician discovered that to fully understand the result, one must extract two key components 
from the computed value of y:
1. The decimal part (integer part of the result).
2. The first 3 digits of the fractional part
Your task is to:
* Compute y.
* Extract and display:
The decimal part of y.
The first 3 digits of the fractional part.
*/
#include<stdio.h>
#include<math.h>
int main(){
    double x,y;
    scanf("%lf %lf",&x,&y);
    double a = pow(x, y)/y;
    int d = a;
    printf("Decimal part = %d\n",d);
    double f = (a-d)*1000;
    int frac = f;
    printf("Fractional part = %03d\n",frac);

return 0;
}

/*One day, a girl named Alika was exploring an old and quiet palace. While walking through the dusty rooms,
she found a magical door with buttons for numbers. On the wall, she saw some instructions:
"Press two numbers to open the door. The order you press them in will decide where you go."
So, Alika pressed two numbers.
*) If the first number is smaller than the second, the door opens and takes her to a new universe.
*) But if the first number is greater than the second, she falls into a magical garden.
There, she finds another magical door that needs just one more number:
1. If that number is even, she goes to a new universe.
2. If that number is odd, she returns to the old palace.
Write a C program to help Alika. Based on the numbers she presses, your program will print where she ends up.
*/
#include<stdio.h>
int main(){
    int a,b,c;
    scanf("%d %d",&a,&b);
    if(a<b){
        printf("New Universe\n");
    }
    if(a>b){
        scanf("%d",&c);
        c = c%2;
        if(c==0){
            printf("New Universe\n");
        }
        if(c!=0){
            printf("Return Back\n");
        }
    }
}

/*Bob is learning about the ASCII values of characters and how uppercase and lowercase letters are represented 
differently. He discovered that each lowercase English letter ('a' to 'z') has a corresponding uppercase letter 
('A' to 'Z'), and vice versa.
To help Bob practice, you are given a single English letter. Your task is to convert the letter to its opposite case:
1. If the letter is in lowercase, convert it to uppercase.
2. If the letter is in uppercase, convert it to lowercase.
*/
#include<stdio.h>
int main(){
    char a;

    scanf("%c",&a);
    int x = a;
    if(a>=65 && a<=90){

        printf("%c\n",a+32);
    }
    if(a>=97 && a<= 122){
        printf("%c\n",a-32);
    }

return 0;
}

/*In a secret laboratory, a circle and a square were drawn on a magical board. The circle has an area of A_circle, and
the square has an area of A_square. Strangely, their positions are such that the circle's center coincides with the
square's center, and the circle's radius r is equal to half the length of the square's diagonal. If anyone gives the
value of the circle area, then the right value of ‘r’ will arise immediately.
In the laboratory, there is a robot, a lab assistant named “ROBOTO“, and he has no idea about the area of any shape.
So he gives the positive and non-positive values randomly, but very strangely, the right answer arises every time.
Your task is to determine the value of r (the radius of the circle) and the area of green color in the square.
Constraints:
-10^16 ≤ circle area < square area ≤ 10^16
*/
#include<stdio.h>
#include<math.h>
int main(){
    long long int A_circle;
    long long int A_square;
    scanf("%lld %lld",&A_circle,&A_square);
    A_circle = abs(A_circle);
	A_square = abs(A_square);

    double a = (A_circle)/3.1416;
    double r = sqrt(a);
    printf("The radius of the circle = %.6lf\n",r);
    long long int g = A_square-A_circle;
    printf("The area of green color = %lld\n",g);

return 0;
}

/*In the quiet village of Numerica, young coder Somrat stumbled upon an old book titled 'The Secrets of Nice
Numbers'. Inside, he found a curious definition: "A digit is considered nice if it is either 6 or 9." He
realized that identifying these digits in any number could help decode hidden messages left behind by the
ancients. Intrigued by this strange rule, Somrat decided to build a counter to uncover how many nice digits
are hidden within a number.
You are given an integer n. Count the nice digits in a number.
*/
#include<stdio.h>
int main(){
    int x;
    scanf("%d",&x);
    int a = x%10;
    int b = (x/10)%10;
    int c = ((x/10)/10)%10;
    int count = 0;
    if(a==6){
        count++;
    }
    if(a==9){
        count++;
    }
    if(b==9){
        count++;
    }
    if(b==6){
        count++;
    }
    if(c==9){
        count++;
    }
    if(c==6){
        count++;
    }
    if(count<=1){
        printf("%d Digit\n",count);
    }
    if(count>1){
        printf("%d Digits\n",count);
    }
return 0;
}

/*You are given two integer numbers, let's call them A and B. Imagine A and B represent the number of magical gems
two young wizards, Alice and Bob, have collected. They want to combine their gems in various ways to see if they
can trigger a special magical event.
Their wise old mentor, Merlin, tells them that the magical event occurs if at least two of the following five
calculations result in an even number:
1. Addition (A + B): The total number of gems they have together.
2. Subtraction (A - B): The difference in the number of gems.
3. Multiplication (A * B): The product of their gem counts.
4. Integer Division (A / B): How many gems Alice has per Bob's gems (ignoring any remainder).
5. Modulus (A % B): The remainder when Alice's gems are divided by Bob's gems.
An even number, as you know, is an integer perfectly divisible by 2. Where 0 is also an even number. Your task is to
help Alice and Bob determine if they can trigger the magical event.
*/
#include<stdio.h>
int main(){
    int x,y;
    scanf("%d %d",&x,&y);
    int a = x+y;
    int b = x-y;
    int c = x*y;
    int d = x/y;
    int e = x%y;
    int count = 0;
    if(a%2==0){
        count++;
    }
    if(b%2==0){
        count++;
    }
    if(c%2==0){
        count++;
    }
    if(d%2==0){
        count++;
    }
    if(e%2==0){
        count++;
    }
    if(count<2){
        printf("This is very Annoying.\n");
    }
    if(count>=2){
        printf("Hurrah! I won the Game.\n");
    }

return 0;
}


//Mega contest No: 01.

/*Problem Name: Easy-Peasy
Problem: You are given the following user log with some suspicious formatting.
Your task is to print exactly the following lines, including all characters, 
symbols, and spacing — as they appear in the log.
Login: ADMIN
Pass: PASSW0RD
Note: All characters look correct... or do they?
*/
#include<stdio.h>
int main(){
    printf("Login: ADMIN\nPass: PASSW0RD\nNote: All characters look correct... or do they?");
return 0;
}

/*Problem Name: Range Sum
Problem: Bob is a curious student who recently started learning about number ranges and arithmetic sequences. While 
reading a book, he stumbled upon a simple yet important concept: calculating the sum of numbers between two given 
integers.
To practice, Bob wants to calculate the sum of all integers from a number L to a number R, inclusive. That means 
he wants to compute:
L + (L+1) + (L+2) + … + R
However, Bob is tired of doing this manually every time, especially when the numbers are large. So, he asks you 
to write a program that can do it for him.
Can you help Bob?
*/
#include<stdio.h>
int main(){
    long long int first,last;
    scanf ("%d %d",&first,&last);
    long long int n = (last-first)+1;
    long long int sum = (n*(last+first))/2;
    printf("%lld\n",sum);
return 0;
}

/*Problem Name: The Over That Wasn't Over Yet.
Problem: Everyone has heard of or watched cricket, but do you truly understand the magic behind an over? Don't stress,
I’ve got you covered!
In cricket, an over consists of 6 legal deliveries. However, not all balls are legal.
Let’s break it down:
If a ball is a wide, it does not count towards the 6 legal deliveries. It adds 1 run to the total and the ball is re-bowled.
If a ball is a no-ball, it does not count as well. It adds 1 run and the next ball (called a free hit) cannot result in a 
wicket, but runs can still be scored.
A legal delivery is a ball that is neither a wide nor a no-ball.
Here’s the twist:
In every over, the 4th ball (including extras) is guaranteed to be either:
an Out “O“ (if it's a legal ball),
a Wide “W“,
a No-ball “N“ (if it is a no-ball, the free hit will always produce runs, not wickets),
Or Runs ('0' to '6')
You can only score between 1 to 6 runs on each legal delivery. Your job is to calculate the total runs scored in a single over.
*/
#include<stdio.h>
#include<math.h>
int main(){
    int a,b,c,d,e,f,total_run;
    char g;
    scanf("%d %d %d %c %d %d",&a,&b,&c,&g,&d,&e);
    if(g=='O'){
        scanf("%d",&f);
        total_run = a+b+c+d+e+f;
        printf("%d\n",total_run);
    }
    else if(g=='W'){
        scanf("%d",&f);
        total_run = a+b+c+d+e+f+1;
        printf("%d\n",total_run);
    }
    else if(g=='N'){
        scanf("%d",&f);
        total_run = a+b+c+d+e+f+1;
        printf("%d\n",total_run);
    }
    else {
            g = abs(48-g);
        total_run =a+b+c+d+e+g;
        printf("%d\n",total_run);
    }
return 0;
}
